{
    "pipes": [],
    "interfaces": [
        {
            "name": "DebtDto",
            "id": "interface-DebtDto-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "debt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberDebt",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventDto",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-81a4206d8ef30f6b6888b25dae75a4ce7163901354f976dcd7e49ae867cd7467d47e03051d0c4b32e774259f029df6775f236a2599ce10af1f43c62793f46580",
            "file": "src/app/event/event-login/add-member/add-member.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  name: string;\n}\n\n@Component({\n  selector: 'app-add-member',\n  templateUrl: './add-member.component.html',\n  styleUrls: ['./add-member.component.scss'],\n})\nexport class AddMemberComponent {\n  constructor(\n    public dialogRef: MatDialogRef<AddMemberComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {}\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Event",
            "id": "interface-Event-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "organizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EventAction",
            "id": "interface-EventAction-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "debtSum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "eventMembersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "eventName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "manager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "memberName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "payerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "purchaseMembersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "purchaseName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionTypes",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EventDto",
            "id": "interface-EventDto-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventAction[]",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "organizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "purchases",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Purchase[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "rePayedDebts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RePayedDebt[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EventMember",
            "id": "interface-EventMember-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Feedback",
            "id": "interface-Feedback-ed758b0c5a6e35162d920ee44972ca9e1d05b777eaaee5861e62599e8f3630c7e95b205eef7581f50068a8743d91c1566f198fb3764d05c5e1565941213fe80e",
            "file": "src/models/Feedback.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Feedback {\n  message: string;\n  email?: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LocalEvent",
            "id": "interface-LocalEvent-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "organizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberBalance",
            "id": "interface-MemberBalance-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberDebt",
            "id": "interface-MemberDebt-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Purchase",
            "id": "interface-Purchase-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "payer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PurchaseMember",
            "id": "interface-PurchaseMember-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RePayedDebt",
            "id": "interface-RePayedDebt-0c4df0a36593a8d6b17129d0fc1915b990cf34373e2480dff4a93d27d45ea24665b03eec64bc65cbe65ccab0d67125169deaf5696c2c9b8942ff6ea7de912131",
            "file": "src/models/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LocalEvent {\n  id: string;\n  organizer: string;\n}\n\nexport interface Event {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n}\n\nexport interface EventDto {\n  id: string;\n  date: number;\n  name: string;\n  organizer: string;\n  members: string[];\n  purchases: Purchase[];\n  rePayedDebts: RePayedDebt[];\n  actions?: EventAction[];\n}\n\nexport interface Purchase {\n  id?: string;\n  date: number;\n  title: string;\n  payer: string;\n  sum: number;\n  members: string[];\n}\n\nexport interface RePayedDebt {\n  id?: string;\n  name: string;\n  sum?: number;\n}\n\nexport interface MemberDebt {\n  from: string;\n  to: string;\n  sum: number;\n}\n\nexport interface DebtDto {\n  event: EventDto;\n  debt: MemberDebt;\n  currentUser: string;\n}\n\nexport interface MemberBalance {\n  name: string;\n  sum: number;\n}\n\nexport interface EventMember {\n  name: string;\n}\n\nexport interface PurchaseMember {\n  name: string;\n  selected: boolean;\n}\n\nexport enum DebtTypes {\n  Positive,\n  Negative,\n  Neutral,\n  Other,\n}\n\nexport interface EventAction {\n  id?: string;\n  type: ActionTypes;\n  date: number;\n  currentUser?: string;\n  eventMembersCount?: number;\n  memberName?: string;\n  sum?: number;\n  debtSum?: number;\n  purchaseName?: string;\n  payerName?: string;\n  purchaseMembersCount?: number;\n  eventName?: string;\n  manager?: string;\n}\n\nexport enum ActionTypes {\n  CreateEvent,\n  ChangeEventName,\n  ChangeEventDate,\n  AddMemberToEvent,\n  AddMembersToEvent,\n  RemoveMemberFromEvent,\n  AddPurchase,\n  DeletePurchase,\n  AddMembersToPurchase,\n  AddMemberToPurchase,\n  RemoveMemberFromPurchase,\n  GiveBackPartially,\n  GiveBack,\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DataService",
            "id": "injectable-DataService-c5cf10c18d8fe149ad3823bc846f332e68fe9dc19c006355b6e63e52f681040d7e437d540f045d3df568b5110cdfbaa087758cc1e6585b3f71e2ff3dc8685da2",
            "file": "src/shared/data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEventAction",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventAction",
                            "type": "EventAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventAction",
                            "type": "EventAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addFeedback",
                    "args": [
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "feedback",
                            "type": "Feedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPurchase",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchase",
                            "type": "Purchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchase",
                            "type": "Purchase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePurchase",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActions",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<{}>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentUser",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEventById",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventDto>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EventDto>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPurchases",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<{}>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRePayedDebts",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<{}>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEventUser",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePurchase",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchase",
                            "type": "Purchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchase",
                            "type": "Purchase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRePayedDebt",
                    "args": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rePayedDebt",
                            "type": "RePayedDebt",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rePayedDebt",
                            "type": "RePayedDebt",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Event,\n  EventDto,\n  EventAction,\n  Purchase,\n  RePayedDebt,\n} from '../models/Event';\nimport { getLocalEvents, setLocalEvents } from './local-storage.service';\nimport { Feedback } from '../models/Feedback';\nimport {\n  Firestore,\n  collection,\n  doc,\n  addDoc,\n  deleteDoc,\n  updateDoc,\n  docData,\n  collectionData,\n  query,\n  where,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { map, mergeMap, take } from 'rxjs/operators';\nimport { forkJoin, from, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  constructor(private firestore: Firestore) {}\n\n  getCurrentUser(eventId: string) {\n    return getLocalEvents().find((x) => x.id === eventId)?.organizer || '';\n  }\n\n  setEventUser(eventId: string, member: string) {\n    setLocalEvents(eventId, member);\n  }\n\n  getEvents(): Observable<EventDto> {\n    const localEvents = getLocalEvents();\n    return from(localEvents).pipe(mergeMap((x) => this.getEventById(x.id)));\n  }\n\n  getEventById(eventId: string): Observable<EventDto> {\n    const ref = doc(this.firestore, `events/${eventId}`);\n\n    return forkJoin({\n      event: (docData(ref, { idField: 'id' }) as Observable<Event>).pipe(\n        take(1)\n      ),\n      purchases: this.getPurchases(eventId).pipe(\n        map((items) => items.sort((a, b) => b.date - a.date)),\n        take(1)\n      ),\n      actions: this.getActions(eventId).pipe(\n        map((items) => items.sort((a, b) => a.date - b.date)),\n        take(1)\n      ),\n      rePayedDebts: this.getRePayedDebts(eventId).pipe(take(1)),\n    }).pipe(\n      map((x) => ({\n        ...x.event,\n        purchases: x.purchases,\n        actions: x.actions,\n        rePayedDebts: x.rePayedDebts,\n      }))\n    );\n  }\n\n  addEvent(event: Event) {\n    const ref = collection(this.firestore, 'events');\n    return addDoc(ref, event);\n  }\n\n  updateEvent(event: Event) {\n    const ref = doc(this.firestore, `events/${event.id}`);\n    return updateDoc(ref, event);\n  }\n\n  getPurchases(eventId: string) {\n    const ref = collection(this.firestore, `events/${eventId}/purchases`);\n    return collectionData(ref, { idField: 'id' }) as Observable<Purchase[]>;\n  }\n\n  addPurchase(eventId: string, purchase: Purchase) {\n    const ref = collection(this.firestore, `events/${eventId}/purchases`);\n    return addDoc(ref, purchase);\n  }\n\n  updatePurchase(eventId: string, purchaseId: string, purchase: Purchase) {\n    const ref = doc(\n      this.firestore,\n      `events/${eventId}/purchases/${purchaseId}`\n    );\n    return updateDoc(ref, purchase);\n  }\n\n  deletePurchase(eventId: string, purchaseId: string) {\n    const purchaseRef = doc(\n      this.firestore,\n      `events/${eventId}/purchases/${purchaseId}`\n    );\n    return deleteDoc(purchaseRef);\n  }\n\n  getActions(eventId: string) {\n    const ref = collection(this.firestore, `events/${eventId}/actions`);\n    return collectionData(ref, { idField: 'id' }) as Observable<EventAction[]>;\n  }\n\n  addEventAction(eventId: string, eventAction: EventAction) {\n    const ref = collection(this.firestore, `events/${eventId}/actions`);\n    return addDoc(ref, eventAction);\n  }\n\n  getRePayedDebts(eventId: string) {\n    const ref = collection(this.firestore, `events/${eventId}/rePayedDebts`);\n    return collectionData(ref, { idField: 'id' }) as Observable<RePayedDebt[]>;\n  }\n\n  async updateRePayedDebt(eventId: string, rePayedDebt: RePayedDebt) {\n    const ref = collection(this.firestore, `events/${eventId}/rePayedDebts`);\n    const findDebtQuery = query(ref, where('name', '==', rePayedDebt.name));\n    const rePayedDebtExists = await getDocs(findDebtQuery);\n\n    if (rePayedDebtExists.empty) {\n      return addDoc(ref, rePayedDebt);\n    }\n\n    return rePayedDebtExists.forEach((debt) => {\n      const oldDebtId = debt.id;\n      const oldDebt = debt.data() as RePayedDebt;\n\n      if (oldDebt.sum && rePayedDebt.sum) {\n        rePayedDebt.sum += oldDebt.sum;\n      }\n\n      const debtRef = doc(\n        this.firestore,\n        `events/${eventId}/rePayedDebts/${oldDebtId}`\n      );\n\n      return updateDoc(debtRef, rePayedDebt);\n    });\n  }\n\n  async addFeedback(feedback: Feedback) {\n    const feedbackCollection = collection(this.firestore, 'feedbacks');\n    return await addDoc(feedbackCollection, feedback);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventActionCreator",
            "id": "injectable-EventActionCreator-d70808a9351c51664319bc760da5f1a5263307a4bcc654cb56a5138f8499a673dd2f05d22580b39d6b221724e2df7b5f79e5221408217e469733bdcdc543ce52",
            "file": "src/shared/event-action-creator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMembersToPurchase",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseMembersCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseMembersCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMemberToEvent",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMemberToPurchase",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPurchase",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeEventDate",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeEventName",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePurchase",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "giveBack",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "giveBackPartially",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMemberFromEvent",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMemberFromPurchase",
                    "args": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventAction",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "moment().utc().valueOf()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActionTypes, EventAction } from '../models/Event';\nimport * as moment from 'moment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventActionCreator {\n  constructor() {}\n\n  changeEventName(\n    currentUser: string,\n    eventName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      eventName,\n      date,\n      type: ActionTypes.ChangeEventName,\n    };\n  }\n\n  changeEventDate(currentUser: string, date: number): EventAction {\n    return {\n      currentUser,\n      date,\n      type: ActionTypes.ChangeEventDate,\n    };\n  }\n\n  addMemberToEvent(\n    currentUser: string,\n    memberName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      memberName,\n      date,\n      type: ActionTypes.AddMemberToEvent,\n    };\n  }\n\n  removeMemberFromEvent(\n    currentUser: string,\n    memberName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      memberName,\n      date,\n      type: ActionTypes.RemoveMemberFromEvent,\n    };\n  }\n\n  addPurchase(\n    currentUser: string,\n    purchaseName: string,\n    sum: number,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      purchaseName,\n      sum,\n      date,\n      type: ActionTypes.AddPurchase,\n    };\n  }\n\n  deletePurchase(\n    currentUser: string,\n    purchaseName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      purchaseName,\n      date,\n      type: ActionTypes.DeletePurchase,\n    };\n  }\n\n  addMemberToPurchase(\n    currentUser: string,\n    payerName: string,\n    purchaseName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      payerName,\n      purchaseName,\n      date,\n      type: ActionTypes.AddMemberToPurchase,\n    };\n  }\n\n  addMembersToPurchase(\n    currentUser: string,\n    purchaseMembersCount: number,\n    purchaseName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      purchaseMembersCount,\n      purchaseName,\n      date,\n      type: ActionTypes.AddMembersToPurchase,\n    };\n  }\n\n  removeMemberFromPurchase(\n    currentUser: string,\n    payerName: string,\n    purchaseName: string,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      payerName,\n      purchaseName,\n      date,\n      type: ActionTypes.RemoveMemberFromPurchase,\n    };\n  }\n\n  giveBackPartially(\n    currentUser: string,\n    payerName: string,\n    debtSum: number,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      payerName,\n      debtSum,\n      date,\n      type: ActionTypes.GiveBackPartially,\n    };\n  }\n\n  giveBack(\n    currentUser: string,\n    payerName: string,\n    debtSum: number,\n    date: number = moment().utc().valueOf()\n  ): EventAction {\n    return {\n      currentUser,\n      payerName,\n      debtSum,\n      date,\n      type: ActionTypes.GiveBack,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-891f0e1df0fb75fa4300c9399f0bffe7abea57eebe1cb343cd09f612c504a8c06454bebd7afe67d91ec9c0b86d2eb70e9092243fdc93b5296be034c7bcdedd16",
            "file": "src/shared/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Закрыть'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Закрыть'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { MatSnackBar } from '@angular/material/snack-bar';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  constructor(private snackBar: MatSnackBar) {}\n\n  open(text: string, action = 'Закрыть', duration = 2000) {\n    this.snackBar.open(text, action, { duration });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TitleService",
            "id": "injectable-TitleService-d71bf0a8b6a1cf50dc2dcdde02ff968f4a64a0596baeac1308d4b96f588ee4ab70a7e38e5e183422000eb9905a94c7ad7cc2b169274e8c3fc24f169ca76fb2c7",
            "file": "src/shared/title.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCustomTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TitleService {\n  constructor(\n    private tabTitle: Title,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  getTitle(): string {\n    const title = this.activatedRoute.snapshot.data['title'];\n    this.tabTitle.setTitle(`${title} - ${environment.name}`);\n    return title;\n  }\n\n  getCustomTitle(title: string): string {\n    this.tabTitle.setTitle(`${title} - ${environment.name}`);\n    return title;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tabTitle",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "tabTitle",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "NumericDirective",
            "id": "directive-NumericDirective-60f162b5fef5d804eb3b2ccf5ee57adbcd329740c098f85bae7b3b5ff39ee9ff63baeb3eb169e317c226bd41bb84b41f42536544abee47b7cb31d3ebdd750639",
            "file": "src/shared/numeric.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: 'input[type=number], input[numbersOnly]',\n})\nexport class NumericDirective {\n  constructor(private elRef: ElementRef) {}\n\n  @HostListener('input', ['$event']) onInputChange(event: any) {\n    const initialValue = this.elRef.nativeElement.value;\n    this.elRef.nativeElement.value = initialValue.replace(/[^0-9]*/g, '');\n\n    if (initialValue !== this.elRef.nativeElement.value) {\n      event.stopPropagation();\n    }\n  }\n}\n",
            "selector": "input[type=number], input[numbersOnly]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ActionItemComponent",
            "id": "component-ActionItemComponent-9f0ca2cf8d20ecba0ea7ebcf235b402d9d837fc060342a934284605623d902122c1e1fe43c4cde1fe0243b0e7963b2c250fbb4daba65e9ab2904b61df8f18f46",
            "file": "src/app/event/event-info/actions-tab/action-item/action-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "action-item",
            "styleUrls": [
                "./action-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventAction",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ActionTypes, EventAction } from '../../../../../models/Event';\nimport * as moment from 'moment';\n\nexport const actionIcons: { [key in ActionTypes]: string } = {\n  [ActionTypes.CreateEvent]: 'calendar_today',\n  [ActionTypes.ChangeEventName]: 'create',\n  [ActionTypes.ChangeEventDate]: 'create',\n  [ActionTypes.AddMemberToEvent]: 'person',\n  [ActionTypes.AddMembersToEvent]: 'person',\n  [ActionTypes.RemoveMemberFromEvent]: 'delete_sweep',\n  [ActionTypes.AddPurchase]: 'add_shopping_cart',\n  [ActionTypes.DeletePurchase]: 'create',\n  [ActionTypes.AddMemberToPurchase]: 'create',\n  [ActionTypes.AddMembersToPurchase]: 'create',\n  [ActionTypes.RemoveMemberFromPurchase]: 'create',\n  [ActionTypes.GiveBackPartially]: 'check_circle',\n  [ActionTypes.GiveBack]: 'check',\n};\n\n@Component({\n  selector: 'action-item',\n  templateUrl: './action-item.component.html',\n  styleUrls: ['./action-item.component.scss'],\n})\nexport class ActionItemComponent {\n  @Input() public action!: EventAction;\n\n  get actionIcon(): string {\n    return actionIcons[this.action.type];\n  }\n\n  get actionDate(): string {\n    return this.action?.date\n      ? moment(this.action?.date).locale('ru').fromNow()\n      : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-action {\n  padding: 16px;\n  display: flex;\n  align-items: center;\n\n  &__icon-wrapper {\n    flex-shrink: 0;\n    margin-right: 16px;\n    background-color: var(--light-grey);\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n  }\n\n  &__icon {\n    width: 24px;\n    height: 24px;\n\n    mat-icon {\n      color: var(--grey);\n    }\n\n    &.icon_check {\n      mat-icon {\n        color: var(--medium-green);\n      }\n    }\n  }\n\n  &__text-wrapper {\n    margin-bottom: 4px;\n  }\n\n  &__text {\n    font-size: 14px;\n    font-weight: 400;\n    color: var(--dark);\n  }\n\n  &__text_bold {\n    font-weight: 500;\n  }\n\n  &__date {\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 1.23;\n    color: var(--grey);\n  }\n\n  &__sum {\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 1.22;\n    color: var(--dark);\n  }\n\n  &__debt-sum {\n    display: flex;\n    align-items: center;\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 1.22;\n    color: var(--dark);\n    margin-bottom: 0.2em;\n\n    mat-icon {\n      font-size: 1.3em;\n      margin-top: -0.1em;\n      margin-right: 0.1em;\n      color: var(--grey);\n    }\n  }\n}\n",
                    "styleUrl": "./action-item.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "actionIcon": {
                    "name": "actionIcon",
                    "getSignature": {
                        "name": "actionIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                },
                "actionDate": {
                    "name": "actionDate",
                    "getSignature": {
                        "name": "actionDate",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"event-action\">\n  <div class=\"event-action__icon-wrapper\">\n    <div class=\"event-action__icon icon_{{ actionIcon }}\">\n      <mat-icon>{{ actionIcon }}</mat-icon>\n    </div>\n  </div>\n  <div class=\"event-action__info\">\n    <div class=\"event-action__content\">\n      <div class=\"event-action__text-wrapper\">\n        <action-type [action]=\"action\"></action-type>\n      </div>\n      <div class=\"event-action__sum\" *ngIf=\"action.sum\">{{ action.sum }} Р</div>\n      <div class=\"event-action__debt-sum\" *ngIf=\"action.debtSum\">\n        <mat-icon>arrow_forward</mat-icon>\n        <span>{{ action.debtSum }} Р</span>\n      </div>\n    </div>\n    <div class=\"event-action__date\" *ngIf=\"action.date\">\n      {{ actionDate }}\n    </div>\n  </div>\n</div>\n<mat-divider></mat-divider>\n"
        },
        {
            "name": "ActionsTabComponent",
            "id": "component-ActionsTabComponent-adabb3f4efb82fd0c7f587f5fc1a5d1bad8aa1f95b04ad0f1d2bfe34081cd494e4121d19313f6ce978261ce7585188aefa3d0b187222a8f449ca2d61c96dae54",
            "file": "src/app/event/event-info/actions-tab/actions-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "actions-tab",
            "styleUrls": [
                "./actions-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./actions-tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventAction[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { EventDto, EventAction } from '../../../../models/Event';\n\n@Component({\n  selector: 'actions-tab',\n  templateUrl: './actions-tab.component.html',\n  styleUrls: ['./actions-tab.component.scss'],\n})\nexport class ActionsTabComponent implements OnInit {\n  @Input() public event!: EventDto;\n\n  public actions: EventAction[] = [];\n\n  ngOnInit(): void {\n    if (this.event?.actions) {\n      this.actions = this.event?.actions.reverse();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./actions-tab.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"event.actions?.length; else noActions\">\n  <action-item\n    *ngFor=\"let action of event.actions\"\n    [action]=\"action\"\n  ></action-item>\n</div>\n\n<ng-template #noActions>\n  <empty-items icon=\"history\" text=\"Действий нет\"></empty-items>\n</ng-template>\n"
        },
        {
            "name": "ActionTypeComponent",
            "id": "component-ActionTypeComponent-f490e561c409ef64379f5abb9db7cafff0e1372430a4a1df21e0acbb86b9cebaaeaca420fe78fb5cbac0e84a3cf1bf8600fea3d730a1ac911ef8aa44ab29cb13",
            "file": "src/app/event/event-info/actions-tab/action-type/action-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "action-type",
            "styleUrls": [
                "./action-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventAction",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ActionTypes, EventAction } from '../../../../../models/Event';\n\n@Component({\n  selector: 'action-type',\n  templateUrl: './action-type.component.html',\n  styleUrls: ['./action-type.component.scss'],\n})\nexport class ActionTypeComponent {\n  @Input() public action!: EventAction;\n\n  public get actionTypes(): typeof ActionTypes {\n    return ActionTypes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./action-type.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "actionTypes": {
                    "name": "actionTypes",
                    "getSignature": {
                        "name": "actionTypes",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<div *ngIf=\"action.type === actionTypes.CreateEvent\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.manager }}</b>\n    создал(-а) мероприятие\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.ChangeEventName\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    изменил(-а) название мероприятия на\n    <b class=\"event-action__text_bold\"> {{ action.eventName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.ChangeEventDate\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    изменил(-а) дату проведения мероприятия на\n    <b class=\"event-action__text_bold\"> {{ action.date }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.AddMemberToEvent\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    добавил(-а) в мероприятие\n    <b class=\"event-action__text_bold\"> {{ action.memberName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.AddMembersToEvent\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.manager }}</b>\n    добавил(-а)\n    <b class=\"event-action__text_bold\">{{ action.eventMembersCount }}</b>\n    человек в мероприятие\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.RemoveMemberFromEvent\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    исключил(-а)\n    <b class=\"event-action__text_bold\"> {{ action.memberName }}</b>\n    из мероприятия\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.AddPurchase\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    добавил(-а) покупку\n    <b class=\"event-action__text_bold\"> {{ action.purchaseName }}</b>\n    на сумму {{ action.sum }}\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.DeletePurchase\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    удалил(-а) покупку\n    <b class=\"event-action__text_bold\"> {{ action.purchaseName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.AddMembersToPurchase\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    добавил(-а)\n    <b class=\"event-action__text_bold\">{{ action.purchaseMembersCount }}</b>\n    человек в покупку\n    <b class=\"event-action__text_bold\"> {{ action.purchaseName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.AddMemberToPurchase\">\n  <span\n    *ngIf=\"action.payerName === action.currentUser\"\n    class=\"event-action__text\"\n  >\n    себя\n  </span>\n  <span\n    *ngIf=\"action.payerName !== action.currentUser\"\n    class=\"event-action__text_bold\"\n  >\n    {{ action.payerName }}\n  </span>\n\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    добавил(-а) {{ action.payerName }}в покупку\n    <b class=\"event-action__text_bold\">{{ action.purchaseName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.RemoveMemberFromPurchase\">\n  <span\n    *ngIf=\"action.payerName === action.currentUser\"\n    class=\"event-action__text\"\n  >\n    себя\n  </span>\n  <span\n    *ngIf=\"action.payerName !== action.currentUser\"\n    class=\"event-action__text_bold\"\n  >\n    {{ action.payerName }}\n  </span>\n\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b>\n    исключил(-а) {{ action.payerName }} из покупки\n    <b class=\"event-action__text_bold\">{{ action.purchaseName }}</b>\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.GiveBackPartially\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b> отметил(-а)\n    долг <b class=\"event-action__text_bold\">{{ action.payerName }}</b> частично\n    возращенным\n  </p>\n</div>\n\n<div *ngIf=\"action.type === actionTypes.GiveBack\">\n  <p class=\"event-action__text\">\n    <b class=\"event-action__text_bold\">{{ action.currentUser }}</b> отметил(-а)\n    долг <b class=\"event-action__text_bold\">{{ action.payerName }}</b> полностью\n    возращенным\n  </p>\n</div>\n"
        },
        {
            "name": "AddMemberComponent",
            "id": "component-AddMemberComponent-81a4206d8ef30f6b6888b25dae75a4ce7163901354f976dcd7e49ae867cd7467d47e03051d0c4b32e774259f029df6775f236a2599ce10af1f43c62793f46580",
            "file": "src/app/event/event-login/add-member/add-member.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-member",
            "styleUrls": [
                "./add-member.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-member.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddMemberComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  name: string;\n}\n\n@Component({\n  selector: 'app-add-member',\n  templateUrl: './add-member.component.html',\n  styleUrls: ['./add-member.component.scss'],\n})\nexport class AddMemberComponent {\n  constructor(\n    public dialogRef: MatDialogRef<AddMemberComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {}\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n",
                    "styleUrl": "./add-member.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMemberComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMemberComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>Добавить себя</h1>\n<div mat-dialog-content>\n  <mat-form-field appearance=\"fill\">\n    <input placeholder=\"Ваше имя\" matInput [(ngModel)]=\"data.name\" />\n  </mat-form-field>\n</div>\n<div mat-dialog-actions class=\"buttons\">\n  <button mat-button (click)=\"onCancel()\">Отмена</button>\n  <button mat-button [mat-dialog-close]=\"data.name\">Войти</button>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-894355d2937f09cc0fa367ce1778b752c7f2a80b757bf2ed09617c79715db585546ffc26e3bd99ba7bec79d0b77dec0e2750e34a3f6a70b215312c4c9305b2bb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-dd8630dcdccbbc88609809dd86f951172b9feee80ca5419b24b09fc4b355db8fe693b6b1576b0cbe9ae0306780136e5c7a45bb0097731cc19917666ce2d66d23",
            "file": "src/app/base-elements/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss'],\n})\nexport class ConfirmDialogComponent {\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  display: flex;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 md-dialog-title>Вы уверены?</h1>\n<div md-dialog-actions class=\"buttons\">\n  <button color=\"basic\" mat-raised-button (click)=\"dialogRef.close(false)\">\n    Нет\n  </button>\n  <button color=\"primary\" mat-raised-button (click)=\"dialogRef.close(true)\">\n    Да\n  </button>\n</div>\n"
        },
        {
            "name": "DebtItemComponent",
            "id": "component-DebtItemComponent-11259e03740fc05634d9768f890174d5dd9a5b60dc344b9e078b9ec5ea996a56cd360ea80f1d409ba561bce5b2aca1694233384555e3d98ef66286ece80ca979",
            "file": "src/app/event/event-info/debts-tab/debt-item/debt-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "debt-item",
            "styleUrls": [
                "./debt-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./debt-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "debt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "MemberDebt",
                    "decorators": []
                },
                {
                    "name": "debtType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "DebtTypes",
                    "decorators": []
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openRePayDebtModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport {\n  ActionTypes,\n  DebtDto,\n  DebtTypes,\n  EventDto,\n  MemberDebt,\n} from '../../../../../models/Event';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RepayDebtComponent } from '../repay-debt/repay-debt.component';\nimport { DataService } from '../../../../../shared/data.service';\n\n@Component({\n  selector: 'debt-item',\n  templateUrl: './debt-item.component.html',\n  styleUrls: ['./debt-item.component.scss'],\n})\nexport class DebtItemComponent {\n  @Input() public event!: EventDto;\n  @Input() public debt!: MemberDebt;\n  @Input() public debtType!: DebtTypes;\n\n  constructor(private dialog: MatDialog, private dataService: DataService) {}\n\n  get debtTypeName() {\n    return DebtTypes[this.debtType].toLowerCase();\n  }\n\n  openRePayDebtModal() {\n    if (this.debtType !== DebtTypes.Neutral) {\n      const currentUser = this.dataService.getCurrentUser(this.event.id);\n\n      const debtDto: DebtDto = {\n        event: this.event,\n        debt: this.debt,\n        currentUser,\n      };\n\n      this.dialog.open(RepayDebtComponent, {\n        width: '400px',\n        data: debtDto,\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".debt-item {\n  display: flex;\n  align-items: center;\n  padding: 1.2em;\n\n  &.returned {\n    .info {\n      color: var(--grey);\n    }\n    .sum {\n      display: none;\n      color: var(--grey);\n    }\n  }\n\n  &.negative {\n    .sum {\n      color: var(--red);\n    }\n  }\n\n  &.positive {\n    .sum {\n      color: var(--medium-green);\n    }\n  }\n\n  &.neutral {\n    .sum {\n      color: var(--dark);\n    }\n  }\n\n  .wrapper {\n    flex-shrink: 1;\n    flex-grow: 1;\n    overflow: hidden;\n\n    .info {\n      flex-grow: 1;\n      flex-shrink: 1;\n      display: flex;\n      align-items: center;\n      overflow-x: auto;\n      overflow-y: hidden;\n      margin-right: 1em;\n      font-size: 1.2em;\n      font-weight: normal;\n      line-height: 1.11;\n      color: var(--dark);\n\n      .from,\n      .to {\n        white-space: nowrap;\n      }\n\n      .icon {\n        flex-grow: 0;\n        flex-shrink: 0;\n        position: relative;\n        font-size: 1em;\n        top: 4px;\n        left: 4px;\n        color: var(--grey);\n        padding: 0 0.2em;\n      }\n    }\n  }\n\n  .sum {\n    flex-grow: 0;\n    flex-shrink: 0;\n    display: inline-block;\n    overflow: hidden;\n    font-size: 1.2em;\n    font-weight: 500;\n    line-height: 1.22;\n  }\n}\n",
                    "styleUrl": "./debt-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "debtTypeName": {
                    "name": "debtTypeName",
                    "getSignature": {
                        "name": "debtTypeName",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<div class=\"debt-item {{ debtTypeName }}\" (click)=\"openRePayDebtModal()\">\n  <div class=\"wrapper\">\n    <div class=\"info\">\n      <div class=\"from\">{{ debt.from }}</div>\n      <mat-icon class=\"icon\">arrow_forward</mat-icon>\n      <div class=\"to\">{{ debt.to }}</div>\n    </div>\n  </div>\n  <div class=\"sum\">{{ debt.sum }} P</div>\n</div>\n<mat-divider></mat-divider>\n"
        },
        {
            "name": "DebtsTabComponent",
            "id": "component-DebtsTabComponent-f34b39ac3648f7be2486f4cd0e95f7b49235ef9248b2968e6de30d2eeb42c57fbda24b736fed3f79029051a27f7c690d9fcc3aa4919d084990237da25bc9e133",
            "file": "src/app/event/event-info/debts-tab/debts-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "debts-tab",
            "styleUrls": [
                "./debts-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./debts-tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allDebts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberDebt[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "negativeDebts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberDebt[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "othersDebts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberDebt[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "positiveDebts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberDebt[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport {\n  ActionTypes,\n  DebtTypes,\n  EventDto,\n  MemberDebt,\n} from '../../../../models/Event';\nimport {\n  getEventBalance,\n  getEventsMembersDebts,\n} from '../../../../utils/BalanceCalculator';\nimport { DataService } from '../../../../shared/data.service';\n\n@Component({\n  selector: 'debts-tab',\n  templateUrl: './debts-tab.component.html',\n  styleUrls: ['./debts-tab.component.scss'],\n})\nexport class DebtsTabComponent implements OnInit {\n  @Input() public event!: EventDto;\n\n  allDebts!: MemberDebt[];\n  positiveDebts!: MemberDebt[];\n  negativeDebts!: MemberDebt[];\n  othersDebts!: MemberDebt[];\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit(): void {\n    const balance = getEventBalance(this.event);\n    const debts = getEventsMembersDebts(balance, this.event);\n    this.allDebts = debts;\n\n    const currentUser = this.dataService.getCurrentUser(this.event.id);\n\n    this.positiveDebts = debts\n      .filter((debt) => currentUser === debt.to)\n      .map((x) => ({\n        sum: Math.abs(Math.round(x.sum)),\n        from: x.from,\n        to: `${x.to} ${currentUser === x.to ? '(Вы)' : ''}`.trim(),\n      }));\n\n    this.negativeDebts = debts\n      .filter((debt) => currentUser === debt.from)\n      .map((x) => ({\n        sum: Math.abs(Math.round(x.sum)),\n        from: `${x.from} ${currentUser === x.from ? '(Вы)' : ''}`.trim(),\n        to: x.to,\n      }));\n\n    this.othersDebts = debts\n      .filter((debt) => currentUser !== debt.from && currentUser !== debt.to)\n      .map((x) => ({\n        sum: Math.abs(Math.round(x.sum)),\n        from: x.from,\n        to: x.to,\n      }));\n  }\n\n  public get debtTypes(): typeof DebtTypes {\n    return DebtTypes;\n  }\n\n  get hasReturnedDebts(): boolean {\n    if (this.event.actions) {\n      return (\n        this.event.actions.filter((x) => x.type == ActionTypes.GiveBack)\n          .length > 0\n      );\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title_wrapper {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "./debts-tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "debtTypes": {
                    "name": "debtTypes",
                    "getSignature": {
                        "name": "debtTypes",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "hasReturnedDebts": {
                    "name": "hasReturnedDebts",
                    "getSignature": {
                        "name": "hasReturnedDebts",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65
                    }
                }
            },
            "templateData": "<div *ngIf=\"allDebts?.length\">\n  <event-check [debts]=\"allDebts\"></event-check>\n\n  <separator></separator>\n\n  <div class=\"title_wrapper\">\n    <grey-title text=\"Текущие долги\"></grey-title>\n  </div>\n\n  <div *ngFor=\"let debt of positiveDebts\">\n    <debt-item\n      [event]=\"event\"\n      [debt]=\"debt\"\n      [debtType]=\"debtTypes.Positive\"\n    ></debt-item>\n  </div>\n\n  <div *ngFor=\"let debt of negativeDebts\">\n    <debt-item\n      [event]=\"event\"\n      [debt]=\"debt\"\n      [debtType]=\"debtTypes.Negative\"\n    ></debt-item>\n  </div>\n\n  <div *ngFor=\"let debt of othersDebts\">\n    <debt-item\n      [event]=\"event\"\n      [debt]=\"debt\"\n      [debtType]=\"debtTypes.Neutral\"\n    ></debt-item>\n  </div>\n</div>\n\n<empty-items\n  *ngIf=\"allDebts.length === 0 && !hasReturnedDebts\"\n  icon=\"add_shopping_cart\"\n  text=\"Баланс появится когда вы заведете покупки\"\n></empty-items>\n\n<empty-items\n  *ngIf=\"allDebts.length === 0 && hasReturnedDebts\"\n  icon=\"check\"\n  text=\"Все долги возвращены\"\n></empty-items>\n"
        },
        {
            "name": "EmptyItemsComponent",
            "id": "component-EmptyItemsComponent-75821d759c793c16884e19c2af12899eae33a56ab8d696ebfa9988f1a7ff43ccaec003aece80c1ff9a368a45b037b4ed28b43326eba7f25bb676489bfe8f1862",
            "file": "src/app/base-elements/empty-items/empty-items.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "empty-items",
            "styleUrls": [
                "./empty-items.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-items.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'empty-items',\n  templateUrl: './empty-items.component.html',\n  styleUrls: ['./empty-items.component.scss'],\n})\nexport class EmptyItemsComponent {\n  @Input() icon!: string;\n  @Input() text!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".empty-items {\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  &__wrapper {\n    max-width: 320px;\n    text-align: center;\n  }\n\n  &__icon {\n    mat-icon {\n      font-size: 10rem;\n      color: var(--medium-grey);\n      height: 100%;\n      width: 100%;\n    }\n  }\n\n  &__text {\n    margin-top: 1em;\n    color: var(--grey);\n  }\n}\n",
                    "styleUrl": "./empty-items.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"empty-items\">\n  <div class=\"empty-items__wrapper\">\n    <div class=\"empty-items__icon\">\n      <mat-icon>{{ icon }}</mat-icon>\n    </div>\n    <div class=\"empty-items__text\">\n      {{ text }}\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EventCheckComponent",
            "id": "component-EventCheckComponent-de3313b927fc57c4e8025b02f42feea5a83b504ee208ce13e295f4b53a02047d6fb4de2ab241813393fda7224658edfd77d4f1c69163e04ee0172911c826ce36",
            "file": "src/app/event/event-info/debts-tab/event-check/event-check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "event-check",
            "styleUrls": [
                "./event-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-check.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "debts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "MemberDebt[]",
                    "decorators": []
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "copyCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input } from '@angular/core';\nimport { EventDto, MemberDebt } from '../../../../../models/Event';\nimport { NotificationService } from '../../../../../shared/notification.service';\n\n@Component({\n  selector: 'event-check',\n  templateUrl: './event-check.component.html',\n  styleUrls: ['./event-check.component.scss'],\n})\nexport class EventCheckComponent {\n  @Input() public event!: EventDto;\n  @Input() public debts!: MemberDebt[];\n\n  checkOpenState: boolean = false;\n\n  constructor(\n    private notificationService: NotificationService,\n    private elRef: ElementRef\n  ) {}\n\n  get check(): string[] {\n    return this.debts?.map(\n      (debt) => `${debt.from} → ${debt.to}   ${Math.abs(debt?.sum || 0)} руб.`\n    );\n  }\n\n  copyCheck() {\n    const checkContent = this.elRef.nativeElement.querySelector(\n      '.balance-check-content__debts'\n    );\n\n    const range = document.createRange();\n    const selection = window.getSelection();\n    selection?.removeAllRanges();\n\n    range.selectNode(checkContent);\n    selection?.addRange(range);\n\n    if (!document.execCommand('copy')) {\n      this.notificationService.open(\n        'Устройство не поддерживает автоматическое копирование. Пожалуйста, скопируйте выделенный текст сами'\n      );\n    } else {\n      this.notificationService.open('Чек скопирован в буфер обмена');\n    }\n\n    selection?.removeAllRanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-expansion-panel-header {\n  &-title {\n    flex-grow: 0;\n  }\n}\n\n.panel-title {\n  margin-top: 2px;\n  font-size: 1.1em;\n  color: var(--dark);\n}\n\n.balance-check-content {\n  font-size: 1.1em;\n  line-height: 1.4;\n  border: 1px solid var(--medium-grey);\n  background-color: var(--light-grey);\n\n  &__debts {\n    padding: 1em 1em 0 1em;\n    font-size: 0.9em;\n    user-select: text;\n  }\n}\n\n.balance-check-button {\n  margin: 2em 0 1em 0;\n  padding: 0.3em 0.6em;\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./event-check.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "check": {
                    "name": "check",
                    "getSignature": {
                        "name": "check",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 21
                    }
                }
            },
            "templateData": "<mat-accordion>\n  <mat-expansion-panel\n    (opened)=\"checkOpenState = true\"\n    (closed)=\"checkOpenState = false\"\n  >\n    <mat-expansion-panel-header>\n      <mat-panel-title><mat-icon>payment</mat-icon></mat-panel-title>\n      <mat-panel-description>\n        <p class=\"panel-title\">Чек</p>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <div class=\"balance-check-content\">\n      <div class=\"balance-check-content__debts\">\n        <p *ngFor=\"let row of check\">{{ row }}</p>\n      </div>\n    </div>\n\n    <button\n      class=\"balance-check-button\"\n      (click)=\"copyCheck()\"\n      mat-raised-button\n      color=\"basic\"\n    >\n      <mat-icon>content_copy</mat-icon>Скопировать чек\n    </button>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "EventFormComponent",
            "id": "component-EventFormComponent-e5333b172f5324f48d98ccb5de8176b66c2e2a1faee17ed26f050b73597779c8d56863c9f88ae1791f124359c6d69be1e6888615640911b4da84f9e95d2f6440",
            "file": "src/app/event/event-form/event-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "event-form",
            "styleUrls": [
                "./event-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "eventForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "eventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hasRePayedDebts",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fillFormArray",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFormFromEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "organizer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "organizer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "removeEmptyMembers",
                    "args": [
                        {
                            "name": "members",
                            "type": "EventMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "members",
                            "type": "EventMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeMembersChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounceTime, pairwise, take } from 'rxjs/operators';\nimport { DataService } from '../../../shared/data.service';\nimport { ActionTypes, Event, EventMember } from '../../../models/Event';\nimport { setLocalEvents } from '../../../shared/local-storage.service';\nimport {\n  duplicateMembersValidator,\n  organizerInMembersValidation,\n} from '../../../utils/FormValidators';\nimport * as moment from 'moment';\nimport { BehaviorSubject, forkJoin } from 'rxjs';\nimport { EventActionCreator } from '../../../shared/event-action-creator';\nimport { TitleService } from '../../../shared/title.service';\n\n@Component({\n  selector: 'event-form',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './event-form.component.html',\n  styleUrls: ['./event-form.component.scss'],\n  providers: [TitleService],\n})\nexport class EventFormComponent implements OnInit {\n  isEdit!: boolean;\n  eventId!: string;\n  event!: Event;\n  eventForm!: FormGroup;\n  hasRePayedDebts: boolean = false;\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dataService: DataService,\n    private eventActionCreator: EventActionCreator,\n    private route: ActivatedRoute,\n    private router: Router,\n    public titleService: TitleService\n  ) {}\n\n  ngOnInit(): void {\n    this.eventForm = this.formBuilder.group(\n      {\n        name: ['', Validators.required],\n        date: new FormControl(new Date()),\n        organizer: ['', Validators.required],\n        members: this.formBuilder.array([]),\n      },\n      {\n        validators: [\n          organizerInMembersValidation(),\n          duplicateMembersValidator(),\n        ],\n      }\n    );\n\n    this.isEdit = this.route.snapshot.data['isEdit'];\n    this.eventId = this.route.snapshot.paramMap.get('id') ?? '';\n\n    if (this.isEdit && this.eventId) {\n      this.loading$.next(true);\n\n      forkJoin({\n        event: this.dataService.getEventById(this.eventId).pipe(take(1)),\n        rePayedDebts: this.dataService\n          .getRePayedDebts(this.eventId)\n          .pipe(take(1)),\n      }).subscribe((x) => {\n        this.event = x.event;\n        this.fillFormFromEvent();\n        this.subscribeMembersChanges();\n\n        this.hasRePayedDebts = x.rePayedDebts?.length > 0;\n        if (this.hasRePayedDebts) {\n          this.eventForm.disable();\n          this.members.controls.forEach((control) => {\n            control.disable();\n          });\n        }\n\n        this.loading$.next(false);\n      });\n    } else {\n      this.subscribeMembersChanges();\n    }\n  }\n\n  get members(): FormArray {\n    return this.eventForm.get('members') as FormArray;\n  }\n\n  fillFormFromEvent() {\n    const { name, date, organizer, members } = this.event;\n\n    this.eventForm.patchValue({\n      name,\n      organizer,\n      date: new Date(date),\n    });\n\n    this.fillFormArray(\n      members\n        .filter((x) => x !== organizer)\n        .map((name) => this.formBuilder.group({ name })) || []\n    );\n  }\n\n  fillFormArray(config: any) {\n    this.eventForm.setControl('members', this.formBuilder.array(config || []));\n  }\n\n  subscribeMembersChanges() {\n    this.members?.valueChanges\n      .pipe(debounceTime(100), pairwise())\n      .subscribe(([prev, curr]: [EventMember[], EventMember[]]) => {\n        if (\n          prev[prev.length - 1].name === '' &&\n          curr[curr.length - 1].name !== ''\n        ) {\n          this.addMember();\n        }\n\n        this.removeEmptyMembers(curr);\n      });\n\n    this.addMember();\n  }\n\n  removeEmptyMembers(members: EventMember[]) {\n    members\n      .map(({ name }, i) => (name === '' && i != members.length - 1 ? i : null))\n      .forEach((n) => {\n        if (n !== null) {\n          this.members.removeAt(n);\n        }\n      });\n  }\n\n  addMember() {\n    const newMember = this.formBuilder.group({ name: '' });\n    this.members.push(newMember);\n  }\n\n  async onSubmit() {\n    if (this.eventForm.valid) {\n      this.loading$.next(true);\n\n      let { name, date, organizer, members } = this.eventForm.value;\n\n      const event: Event = {\n        id: '',\n        name,\n        organizer,\n        date: moment.utc(date).valueOf(),\n        members: [\n          organizer,\n          ...this.members?.value\n            .filter((n: EventMember) => n.name !== '')\n            .map((x: EventMember) => x.name),\n        ],\n      };\n\n      if (this.isEdit && this.eventId) {\n        event.id = this.eventId;\n\n        await this.dataService.updateEvent(event).then(async (res: any) => {\n          await this.onChange(this.eventId, event.organizer);\n        });\n      } else {\n        await this.dataService.addEvent(event).then(async (res: any) => {\n          const id = res._key.path.segments[1];\n\n          [\n            {\n              type: ActionTypes.CreateEvent,\n              manager: organizer,\n              date: moment().utc().valueOf(),\n            },\n            {\n              type: ActionTypes.AddMembersToEvent,\n              manager: organizer,\n              eventMembersCount: members.length,\n              date: moment().utc().valueOf(),\n            },\n          ].forEach((action) => this.dataService.addEventAction(id, action));\n\n          await this.onChange(id, event.organizer);\n        });\n      }\n    }\n  }\n\n  async onChange(id: string, organizer: string) {\n    setLocalEvents(id, organizer);\n    this.loading$.next(false);\n    await this.router.navigate(['events', id], { state: { isCreated: true } });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./event-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "members": {
                    "name": "members",
                    "getSignature": {
                        "name": "members",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 94
                    }
                }
            },
            "templateData": "<header>\n  <mat-toolbar color=\"primary\">\n    <button class=\"router-button\" mat-icon-button [routerLink]=\"['/']\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <h1>{{ titleService.getTitle() }}</h1>\n    <span class=\"spacer\"></span>\n    <button\n      mat-icon-button\n      form=\"eventForm\"\n      *ngIf=\"!hasRePayedDebts\"\n      [disabled]=\"eventForm.invalid\"\n    >\n      <mat-icon>check</mat-icon>\n    </button>\n  </mat-toolbar>\n</header>\n\n<div *ngIf=\"loading$ | async; else form\">\n  <spinner></spinner>\n</div>\n\n<ng-template #form>\n  <main class=\"container\">\n    <div\n      *ngIf=\"isEdit && hasRePayedDebts\"\n      class=\"mat-form-field-invalid hasRePayedDebts\"\n    >\n      После начала возвращения долгов можно редактировать только название\n      покупки.\n    </div>\n\n    <form [formGroup]=\"eventForm\" (ngSubmit)=\"onSubmit()\" id=\"eventForm\">\n      <mat-form-field class=\"full-width\">\n        <mat-label>Название</mat-label>\n        <input matInput formControlName=\"name\" required />\n      </mat-form-field>\n\n      <mat-form-field class=\"full-width\">\n        <mat-label>Дата проведения</mat-label>\n        <input\n          matInput\n          [matDatepicker]=\"picker\"\n          formControlName=\"date\"\n          required=\"true\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n\n      <separator position=\"outer\"></separator>\n      <grey-title text=\"Добавить участников\"></grey-title>\n\n      <mat-form-field class=\"full-width\">\n        <input\n          matInput\n          formControlName=\"organizer\"\n          required=\"true\"\n          placeholder=\"Ваше имя\"\n        />\n      </mat-form-field>\n\n      <div\n        *ngIf=\"eventForm.errors?.hasMembersDuplicates\"\n        class=\"mat-form-field-invalid\"\n      >\n        Имена участников не должны повторяться\n      </div>\n\n      <div\n        *ngIf=\"eventForm.errors?.organizerInMembers\"\n        class=\"mat-form-field-invalid\"\n      >\n        Организатор уже есть в списке участников\n      </div>\n\n      <div formArrayName=\"members\">\n        <mat-form-field\n          class=\"full-width\"\n          *ngFor=\"let member of members.controls; let i = index\"\n          [formGroupName]=\"i\"\n        >\n          <input\n            matInput\n            formControlName=\"name\"\n            placeholder=\"Добавить участника\"\n          />\n        </mat-form-field>\n      </div>\n    </form>\n  </main>\n</ng-template>\n"
        },
        {
            "name": "EventHeaderComponent",
            "id": "component-EventHeaderComponent-6880cbbbd1afc1a3b76dd41296698ba4cacdec009d630358e6ad93f40cfc24295b093ac28090ddff6bb8a53c645e5bc0d72b0a32bb6873b145ea99822ee27960",
            "file": "src/app/event/event-info/event-sidenav/event-header/event-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "event-header",
            "styleUrls": [
                "./event-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Event",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport * as moment from 'moment';\nimport { Event } from '../../../../../models/Event';\n\n@Component({\n  selector: 'event-header',\n  templateUrl: './event-header.component.html',\n  styleUrls: ['./event-header.component.scss'],\n})\nexport class EventHeaderComponent implements OnInit {\n  @Input() event!: Event;\n\n  ngOnInit(): void {}\n\n  get eventSubtitle(): string {\n    const memberStatus = `${this.event.members.length} участников`;\n    const formattedDate = moment(this.event.date)\n      .locale('ru')\n      .format('DD MMMM');\n\n    return `${memberStatus} • ${formattedDate}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event_description {\n  .event_title {\n    font-size: 24px;\n    font-weight: 500;\n    word-wrap: break-word;\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n\n  .event_subtitle {\n    font-size: 13px;\n    font-weight: normal;\n    color: var(--grey);\n    line-height: 1.2;\n  }\n}\n",
                    "styleUrl": "./event-header.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "eventSubtitle": {
                    "name": "eventSubtitle",
                    "getSignature": {
                        "name": "eventSubtitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                }
            },
            "templateData": "<div class=\"event_description\">\n  <h2 class=\"event_title\">{{ event?.name }}</h2>\n  <span class=\"event_subtitle\">{{ eventSubtitle }}</span>\n</div>\n"
        },
        {
            "name": "EventInfoComponent",
            "id": "component-EventInfoComponent-0b2a75a8a89d8251c9ccfdd5e3d78e01f58eefa86d536af331de43952766f2fb6e9627712ced89dd1023962eb73e3f2df635649d47192a098335646f690ae790",
            "file": "src/app/event/event-info/event-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "event-info",
            "styleUrls": [
                "./event-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventDto",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "eventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "opened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSidenav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openShareModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { EventDto } from '../../../models/Event';\nimport { DataService } from '../../../shared/data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ShareEventComponent } from './share-event/share-event.component';\nimport { TitleService } from '../../../shared/title.service';\n\n@Component({\n  selector: 'event-info',\n  templateUrl: './event-info.component.html',\n  styleUrls: ['./event-info.component.scss'],\n  providers: [TitleService],\n})\nexport class EventInfoComponent implements OnInit {\n  eventId: string;\n  event!: EventDto;\n  opened: boolean = false;\n\n  constructor(\n    private activateRoute: ActivatedRoute,\n    private dataService: DataService,\n    private dialog: MatDialog,\n    public titleService: TitleService\n  ) {\n    this.eventId = activateRoute.snapshot.params['id'];\n  }\n\n  ngOnInit(): void {\n    if (history.state.isCreated) {\n      this.openShareModal();\n    }\n\n    this.dataService.getEventById(this.eventId).subscribe((event: EventDto) => {\n      this.event = event;\n    });\n  }\n\n  closeSidenav() {\n    this.opened = false;\n  }\n\n  openShareModal() {\n    this.dialog.open(ShareEventComponent, {\n      width: '350px',\n      data: this.eventId,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\nmat-sidenav {\n  width: 260px;\n}\n\nmain {\n  height: calc(100% - 64px);\n  mat-tab-group {\n    height: 100%;\n  }\n}\n",
                    "styleUrl": "./event-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container\n  class=\"sidenav-container\"\n  (backdropClick)=\"closeSidenav()\"\n  *ngIf=\"event\"\n>\n  <mat-sidenav\n    (keydown.escape)=\"closeSidenav()\"\n    [(opened)]=\"opened\"\n    [fixedInViewport]=\"true\"\n    position=\"end\"\n    disableClose\n  >\n    <event-sidenav [event]=\"event\"></event-sidenav>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <header>\n      <mat-toolbar color=\"primary\">\n        <button class=\"router-button\" mat-icon-button [routerLink]=\"['/']\">\n          <mat-icon>arrow_backward</mat-icon>\n        </button>\n        <h1>{{ titleService.getCustomTitle(event.name) }}</h1>\n        <span class=\"spacer\"></span>\n        <button (click)=\"openShareModal()\" mat-icon-button>\n          <mat-icon>share</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"opened = !opened\">\n          <mat-icon>menu</mat-icon>\n        </button>\n      </mat-toolbar>\n    </header>\n\n    <main>\n      <mat-tab-group mat-stretch-tabs>\n        <mat-tab label=\"Покупки\" style=\"height: 100%\">\n          <purchases-tab [event]=\"event\"></purchases-tab>\n        </mat-tab>\n        <mat-tab label=\"Баланс\">\n          <debts-tab [event]=\"event\"></debts-tab>\n        </mat-tab>\n        <mat-tab label=\"Действия\">\n          <actions-tab [event]=\"event\"></actions-tab>\n        </mat-tab>\n      </mat-tab-group>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "EventItemComponent",
            "id": "component-EventItemComponent-c4e7ad1bd0709e00c677858e936260d81d411e9b4f78d3e5e8a65455ee5a751a26c03d2d4609f0b6e97cefa1ed058992a1a927adb02069dd64b26d87a1c458a0",
            "file": "src/app/events/event-item/event-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "event-item",
            "styleUrls": [
                "./event-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "debtStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "debtType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { DebtTypes, EventDto } from '../../../models/Event';\nimport { getEventBalance } from '../../../utils/BalanceCalculator';\nimport {\n  formatSum,\n  formatDebtType,\n  formatStatus,\n} from '../../../utils/Formatters';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'event-item',\n  templateUrl: './event-item.component.html',\n  styleUrls: ['./event-item.component.scss'],\n})\nexport class EventItemComponent implements OnInit {\n  @Input() public event!: EventDto;\n\n  public date!: string;\n  public sum!: string | null;\n  public debtType!: string;\n  public debtStatus!: string | null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    const { organizer, members, date } = this.event;\n\n    this.date = `${moment(date).locale('ru').format('DD MMMM')}, ${moment(date)\n      .locale('ru')\n      .format('dddd')}`;\n\n    const eventBalance = getEventBalance(this.event);\n    const currentBalance =\n      eventBalance.find((x) => x.name === organizer)?.sum || 0;\n    const sum = Math.round(currentBalance);\n\n    this.sum = sum == 0 ? null : `${formatSum(Math.abs(sum))}`;\n    this.debtStatus = formatStatus(sum);\n    this.debtType = DebtTypes[formatDebtType(currentBalance)].toLowerCase();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 1em;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &__description {\n    flex-grow: 1;\n    flex-shrink: 1;\n\n    .description-title {\n      font-size: 20px;\n      font-weight: normal;\n      line-height: 1.1;\n      color: var(--dark);\n      margin: 0 0 8px 0;\n    }\n\n    .description-subtitle {\n      font-size: 14px;\n      line-height: 1.14;\n      color: var(--grey);\n\n      .subtitle-date {\n        margin-bottom: 4px;\n      }\n    }\n  }\n\n  &__debt {\n    display: flex;\n    flex-direction: column-reverse;\n    flex-grow: 0;\n    flex-shrink: 0;\n\n    .debt-status {\n      text-align: right;\n\n      &.negative {\n        color: var(--red);\n      }\n\n      &.positive {\n        color: var(--medium-green);\n      }\n\n      &.neutral {\n        color: var(--dark);\n      }\n    }\n\n    .debt-status {\n      font-size: 20px;\n      font-weight: 500;\n      line-height: 1.1;\n    }\n\n    .status {\n      font-size: 13px;\n      font-weight: normal;\n      line-height: 1.23;\n\n      &.positive {\n        color: var(--medium-green);\n      }\n\n      &.negative {\n        color: var(--red);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./event-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-item\" [routerLink]=\"['events', event.id]\">\n  <div class=\"event-item__description\">\n    <div class=\"description-title\">{{ event.name }}</div>\n    <div class=\"description-subtitle\">\n      <div class=\"subtitle-date\">{{ date }}</div>\n      <div class=\"subtitle-members\">{{ event.members.length }} участников</div>\n    </div>\n  </div>\n  <div class=\"event-item__debt\">\n    <div class=\"debt-status {{ debtType }}\">\n      <div class=\"debt-sum\">\n        {{ sum }}\n      </div>\n      <div class=\"status {{ debtType }}\">\n        {{ debtStatus }}\n      </div>\n    </div>\n  </div>\n</div>\n\n<mat-divider></mat-divider>\n"
        },
        {
            "name": "EventLoginComponent",
            "id": "component-EventLoginComponent-73d0ed5f08295f6eb0fb8bd37ed604052352e6dbf3e593d934315f1086a190deb3a635aee0cf7a53baf5b0086dad670675c77bba7e5bd76c79c8e3d9e64a7570",
            "file": "src/app/event/event-login/event-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "app-event-login",
            "styleUrls": [
                "./event-login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "eventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setEventMember",
                    "args": [
                        {
                            "name": "member",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Event, EventDto } from '../../../models/Event';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../../../shared/data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddMemberComponent } from './add-member/add-member.component';\nimport { EventActionCreator } from '../../../shared/event-action-creator';\nimport { TitleService } from '../../../shared/title.service';\n\n@Component({\n  selector: 'app-event-login',\n  templateUrl: './event-login.component.html',\n  styleUrls: ['./event-login.component.scss'],\n  providers: [TitleService],\n})\nexport class EventLoginComponent implements OnInit {\n  eventId: string;\n  event!: Event;\n\n  name!: string;\n\n  constructor(\n    public dialog: MatDialog,\n    private router: Router,\n    private activateRoute: ActivatedRoute,\n    private dataService: DataService,\n    private eventActionCreator: EventActionCreator,\n    public titleService: TitleService\n  ) {\n    this.eventId = activateRoute.snapshot.params['id'];\n  }\n\n  ngOnInit(): void {\n    this.titleService.getTitle();\n\n    this.dataService.getEventById(this.eventId).subscribe((event: EventDto) => {\n      this.event = event;\n    });\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberComponent, {\n      width: '250px',\n      data: { name: this.name },\n    });\n\n    const members = this.event.members.map((x) => x.toLowerCase());\n\n    dialogRef.afterClosed().subscribe(async (result) => {\n      if (result && !members.includes(result.toLowerCase())) {\n        const action = this.eventActionCreator.addMemberToEvent(\n          'Через приглашение',\n          result\n        );\n\n        this.event.members.push(result);\n        this.dataService.updateEvent(this.event);\n        this.dataService.addEventAction(this.eventId, action);\n        await this.setEventMember(result);\n      }\n    });\n  }\n\n  async setEventMember(member: string) {\n    this.dataService.setEventUser(this.eventId, member);\n    await this.router.navigate(['events', this.eventId]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-login {\n  &__header {\n    background-color: var(--light-grey);\n    padding: 2em 2em 0 2em;\n\n    .header {\n      &__invite {\n        .author {\n          font-weight: bold;\n        }\n      }\n\n      &__info {\n        display: block;\n        margin-top: 1.5em;\n        padding: 2em 0;\n      }\n    }\n  }\n\n  &__selector {\n    padding: 1em 2em;\n\n    .selector__members {\n      .member_item {\n        margin-right: 1em;\n        margin-bottom: 1em;\n\n        .add-member-text {\n          color: var(--grey);\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./event-login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-login\" *ngIf=\"event\">\n  <div class=\"event-login__header\">\n    <div class=\"header__invite\">\n      <span class=\"author\">{{ event.organizer }}</span>\n      прислал(-а) вам приглашение на мероприятие\n    </div>\n\n    <event-header [event]=\"event\" class=\"header__info\"></event-header>\n  </div>\n\n  <div class=\"event-login__selector\">\n    <grey-title\n      class=\"selector__title\"\n      text=\"Выберите себя среди участников\"\n    ></grey-title>\n\n    <div class=\"selector__members\">\n      <button\n        class=\"member_item\"\n        *ngFor=\"let member of event.members\"\n        (click)=\"setEventMember(member)\"\n        mat-stroked-button\n      >\n        {{ member }}\n      </button>\n\n      <button class=\"member_item\" (click)=\"openDialog()\" mat-stroked-button>\n        <span class=\"add-member-text\">Добавить себя</span>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EventSidenavComponent",
            "id": "component-EventSidenavComponent-247cdc6f36074dcb84d7e0e5243053edf9db25440193a89d523d06c84768dc887b050f2076e9a04fd262f8b87f493a2608695dea4e486e1de1532226094ee9bf",
            "file": "src/app/event/event-info/event-sidenav/event-sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "event-sidenav",
            "styleUrls": [
                "./event-sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getMemberName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPwaDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { EventDto } from '../../../../models/Event';\nimport * as moment from 'moment';\nimport { Router } from '@angular/router';\nimport { DataService } from '../../../../shared/data.service';\nimport { AddMemberComponent } from '../../event-login/add-member/add-member.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PwaInstallComponent } from './pwa-install/pwa-install.component';\n\n@Component({\n  selector: 'event-sidenav',\n  templateUrl: './event-sidenav.component.html',\n  styleUrls: ['./event-sidenav.component.scss'],\n})\nexport class EventSidenavComponent {\n  @Input() event!: EventDto;\n\n  constructor(private dataService: DataService, public dialog: MatDialog) {}\n\n  get hasRePayedDebts(): boolean {\n    return this.event?.rePayedDebts?.length > 0;\n  }\n\n  getMemberName(name: string) {\n    let memberName: string = name;\n\n    if (name === this.dataService.getCurrentUser(this.event.id)) {\n      memberName += ' (Вы)';\n    }\n\n    if (name === this.event.organizer) {\n      memberName += ' ★';\n    }\n\n    return memberName;\n  }\n\n  openPwaDialog(): void {\n    const dialogRef = this.dialog.open(PwaInstallComponent, {\n      width: '80vw',\n      height: '60vh',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav {\n  overflow-y: scroll;\n\n  &_header {\n    padding: 1.2em 1em;\n\n    .event_actions {\n      display: flex;\n\n      .actions_item {\n        margin-right: 1em;\n        cursor: pointer;\n      }\n    }\n  }\n\n  &_main {\n    margin-top: 0.5em;\n\n    .event_header {\n      display: block;\n      padding: 0 1.2em;\n      margin-bottom: 1em;\n    }\n\n    .event_members {\n      padding: 0 1.2em;\n      margin: 1em 0 0.5em 0;\n\n      .members_title {\n        text-transform: uppercase;\n        line-height: 1.38;\n        letter-spacing: 1px;\n        color: var(--grey);\n        margin-bottom: 0.6em;\n      }\n\n      .members_item {\n        padding: 0.8em 0;\n        font-size: 1.2em;\n      }\n    }\n\n    .event_login {\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      padding: 1em 1.2em;\n\n      .login_icon {\n        margin-right: 1.8em;\n        margin-top: 5px;\n\n        mat-icon {\n          font-size: 2em;\n        }\n      }\n\n      .login_button {\n        font-size: 1.2em;\n      }\n    }\n\n    .event_organizer {\n      padding: 0 1.2em;\n      margin-top: 1em;\n    }\n  }\n}\n",
                    "styleUrl": "./event-sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "hasRePayedDebts": {
                    "name": "hasRePayedDebts",
                    "getSignature": {
                        "name": "hasRePayedDebts",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"sidenav\">\n  <header class=\"sidenav_header\">\n    <div class=\"event_actions\">\n      <div\n        *ngIf=\"!hasRePayedDebts\"\n        class=\"actions_item\"\n        [routerLink]=\"['edit']\"\n      >\n        <mat-icon>edit</mat-icon>\n      </div>\n      <div class=\"actions_item\">\n        <mat-icon (click)=\"openPwaDialog()\">add_to_home_screen</mat-icon>\n      </div>\n    </div>\n  </header>\n\n  <main class=\"sidenav_main\">\n    <event-header [event]=\"event\" class=\"event_header\"></event-header>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"event_members\">\n      <div class=\"members_title\">Участники</div>\n      <div class=\"members_item\" *ngFor=\"let member of event.members\">\n        {{ getMemberName(member) }}\n      </div>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"event_login\">\n      <div class=\"login_icon\">\n        <mat-icon>login</mat-icon>\n      </div>\n      <div [routerLink]=\"['login']\" class=\"login_button\">\n        Войти под другим именем\n      </div>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"event_organizer\">★ — организатор мероприятия</div>\n  </main>\n</div>\n"
        },
        {
            "name": "EventsListComponent",
            "id": "component-EventsListComponent-06695f52cae7ee52d6bd4e809aeed7dcdb16c00dfec483984161aec7871afbfc37d13d35e02c7ae52cddfa0a925b6150fd6df96ea9e7fe87583a45ed105813b1",
            "file": "src/app/events/events-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "events-list",
            "styleUrls": [
                "./events-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./events-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "events",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventDto[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { EventDto } from '../../models/Event';\nimport { DataService } from '../../shared/data.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { TitleService } from '../../shared/title.service';\n\n@Component({\n  selector: 'events-list',\n  templateUrl: './events-list.component.html',\n  styleUrls: ['./events-list.component.scss'],\n  providers: [TitleService],\n})\nexport class EventsListComponent implements OnInit {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  events: EventDto[] = [];\n\n  constructor(\n    private dataService: DataService,\n    public titleService: TitleService\n  ) {}\n\n  ngOnInit(): void {\n    this.dataService.getEvents().subscribe(\n      (event: EventDto) => {\n        if (event.id) {\n          this.events.push(event);\n        }\n\n        this.loading$.next(false);\n      },\n      (err) => console.error(err),\n      () => {\n        this.loading$.next(false);\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./events-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <mat-toolbar color=\"primary\">\n    <h1>{{ this.titleService.getTitle() }}</h1>\n    <span class=\"spacer\"></span>\n    <button mat-icon-button [routerLink]=\"['feedback']\">\n      <mat-icon>mail</mat-icon>\n    </button>\n  </mat-toolbar>\n</header>\n\n<div *ngIf=\"loading$ | async; else form\">\n  <spinner></spinner>\n</div>\n\n<ng-template #form>\n  <main>\n    <div *ngIf=\"events.length; else noEvents\">\n      <event-item\n        *ngFor=\"let event of events.reverse()\"\n        [event]=\"event\"\n      ></event-item>\n    </div>\n\n    <ng-template #noEvents>\n      <empty-items\n        icon=\"event\"\n        text=\"У вас пока нет мероприятий, создайте первым свое мероприятие и добавьте участников\"\n      ></empty-items>\n    </ng-template>\n\n    <fab-button link=\"/events/new\" icon=\"add\"></fab-button>\n  </main>\n</ng-template>\n"
        },
        {
            "name": "FabButtonComponent",
            "id": "component-FabButtonComponent-587baf798fa08aacfba733656cacee59dbc096a743231add1dc53f05f41ae07bc311820aea6fce546987b0bcc1fcf524c3ea4597cbc359aa07f4933f984546d0",
            "file": "src/app/base-elements/fab-button/fab-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "fab-button",
            "styleUrls": [
                "./fab-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fab-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'fab-button',\n  templateUrl: './fab-button.component.html',\n  styleUrls: ['./fab-button.component.scss'],\n})\nexport class FabButtonComponent {\n  @Input() link!: string;\n  @Input() icon!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add-button {\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  cursor: pointer;\n  transition: 0.2s box-shadow;\n}\n",
                    "styleUrl": "./fab-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-fab [routerLink]=\"link\" class=\"add-button\" color=\"primary\">\n  <mat-icon>{{ icon }}</mat-icon>\n</button>\n"
        },
        {
            "name": "FeedbackFormComponent",
            "id": "component-FeedbackFormComponent-937bbd07a961f050759a729416e92dd745000e8ba59b5b7482c3cb8a4d5258fa703cae5e3ab794fff7aad24b16027707322d1d5d68c72b8da5aafb2e22520dbe",
            "file": "src/app/feedback/feedback-form/feedback-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "feedback",
            "styleUrls": [
                "./feedback-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feedback-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "feedbackForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../../../shared/data.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Feedback } from '../../../models/Feedback';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { TitleService } from '../../../shared/title.service';\n\n@Component({\n  selector: 'feedback',\n  templateUrl: './feedback-form.component.html',\n  styleUrls: ['./feedback-form.component.scss'],\n  providers: [TitleService],\n})\nexport class FeedbackFormComponent implements OnInit {\n  feedbackForm!: FormGroup;\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor(\n    private dataService: DataService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    public titleService: TitleService\n  ) {}\n\n  ngOnInit(): void {\n    this.feedbackForm = this.formBuilder.group({\n      message: ['', Validators.required],\n      email: [\n        '',\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n      ],\n    });\n  }\n\n  async onSubmit() {\n    if (this.feedbackForm.valid) {\n      const form = <Feedback>this.feedbackForm.value;\n      this.loading$.next(true);\n\n      await this.dataService.addFeedback(form).then((res) => {\n        this.feedbackForm.reset();\n        this.loading$.next(false);\n        this.router.navigate(['/']);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./feedback-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <mat-toolbar color=\"primary\">\n    <button class=\"router-button\" mat-icon-button [routerLink]=\"['/']\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <h1>{{ this.titleService.getTitle() }}</h1>\n    <span class=\"spacer\"></span>\n    <button\n      mat-icon-button\n      form=\"feedbackForm\"\n      [disabled]=\"feedbackForm.invalid\"\n    >\n      <mat-icon>check</mat-icon>\n    </button>\n  </mat-toolbar>\n</header>\n\n<div *ngIf=\"loading$ | async; else form\">\n  <spinner></spinner>\n</div>\n\n<ng-template #form>\n  <main class=\"container\">\n    <form [formGroup]=\"feedbackForm\" (ngSubmit)=\"onSubmit()\" id=\"feedbackForm\">\n      <mat-form-field class=\"full-width\">\n        <mat-label>Электронная почта (необязательно)</mat-label>\n        <input matInput formControlName=\"email\" />\n      </mat-form-field>\n\n      <mat-form-field class=\"full-width\">\n        <mat-label>Ваш отзыв</mat-label>\n        <textarea\n          matInput\n          formControlName=\"message\"\n          rows=\"10\"\n          required\n        ></textarea>\n      </mat-form-field>\n    </form>\n  </main>\n</ng-template>\n"
        },
        {
            "name": "GreyTitleComponent",
            "id": "component-GreyTitleComponent-5de9ecd76a8ea2c3f4c67b0c1ec4ee4723518c7fc00544dc92e8df49b7b2adc74b5f10de7df2d616dc4f9d39de3c0ad9ebd586c329e3747c10f4bdcfb257219e",
            "file": "src/app/base-elements/grey-title/grey-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "grey-title",
            "styleUrls": [
                "./grey-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grey-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'grey-title',\n  templateUrl: './grey-title.component.html',\n  styleUrls: ['./grey-title.component.scss'],\n})\nexport class GreyTitleComponent {\n  @Input() text!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grey-title {\n  padding: 1em 0em;\n  text-transform: uppercase;\n  text-align: left;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 1.38;\n  letter-spacing: 1px;\n  color: var(--grey);\n}\n",
                    "styleUrl": "./grey-title.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"grey-title\">{{ text }}</div>\n"
        },
        {
            "name": "PurchaseFormComponent",
            "id": "component-PurchaseFormComponent-9e473eee3d72a77f093b48634f1dce012db643c88f31bb68e0a01bdb0cc766239e4aa61b8cd811ae1637f8e4123ad09a4c6b00b71696cd88259ac7550982467f",
            "file": "src/app/purchase/purchase-form/purchase-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TitleService"
                }
            ],
            "selector": "purchase-form",
            "styleUrls": [
                "./purchase-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./purchase-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventDto",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "eventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "purchase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Purchase",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "purchaseForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "purchaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "titleService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TitleService",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAllMembers",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFormArray",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFormFromEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapPurchase",
                    "args": [],
                    "optional": false,
                    "returnType": "Purchase",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "onDeletePurchase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { DataService } from '../../../shared/data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { EventDto, Purchase, PurchaseMember } from '../../../models/Event';\nimport { EventActionCreator } from '../../../shared/event-action-creator';\nimport {\n  minMembersCountInPurchase,\n  sumGreaterZero,\n} from '../../../utils/FormValidators';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from '../../base-elements/confirm-dialog/confirm-dialog.component';\nimport * as moment from 'moment';\nimport { TitleService } from '../../../shared/title.service';\n\n@Component({\n  selector: 'purchase-form',\n  templateUrl: './purchase-form.component.html',\n  styleUrls: ['./purchase-form.component.scss'],\n  providers: [TitleService],\n})\nexport class PurchaseFormComponent implements OnInit {\n  isEdit!: boolean;\n  eventId!: string;\n  event!: EventDto;\n  purchaseId!: string;\n  purchase!: Purchase;\n  purchaseForm!: FormGroup;\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  dialogRef!: MatDialogRef<ConfirmDialogComponent>;\n\n  constructor(\n    private dataService: DataService,\n    private eventActionCreator: EventActionCreator,\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dialog: MatDialog,\n    public titleService: TitleService\n  ) {}\n\n  ngOnInit(): void {\n    this.isEdit = this.route.snapshot.data['isEdit'];\n    this.eventId = this.route.snapshot.paramMap.get('id') ?? '';\n    this.purchaseId = this.route.snapshot.paramMap.get('purchaseId') ?? '';\n\n    this.purchaseForm = this.formBuilder.group(\n      {\n        title: ['', Validators.required],\n        payer: new FormControl(\n          { value: '', disabled: this.isEdit && this.hasRePayedDebts },\n          Validators.required\n        ),\n        sum: new FormControl(\n          { value: 0, disabled: this.isEdit && this.hasRePayedDebts },\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[0-9]*$'),\n          ])\n        ),\n        members: this.formBuilder.array([]),\n      },\n      {\n        validators: [sumGreaterZero(), minMembersCountInPurchase()],\n      }\n    );\n\n    this.dataService.getEventById(this.eventId).subscribe((event) => {\n      this.event = event;\n\n      if (this.isEdit && this.purchaseId) {\n        this.fillFormFromEvent();\n      } else {\n        this.checkAllMembers(true);\n      }\n\n      this.loading$.next(false);\n    });\n  }\n\n  get members(): FormArray {\n    return this.purchaseForm.get('members') as FormArray;\n  }\n\n  get hasRePayedDebts(): boolean {\n    return this.event?.rePayedDebts?.length > 0;\n  }\n\n  fillFormFromEvent() {\n    const purchase = this.event.purchases.find((x) => x.id === this.purchaseId);\n\n    if (purchase) {\n      this.purchase = purchase;\n\n      this.purchaseForm.patchValue({\n        title: purchase.title,\n        payer: purchase.payer,\n        sum: purchase.sum,\n      });\n\n      this.fillFormArray(\n        this.event.members.map((name) =>\n          this.formBuilder.group({\n            name,\n            selected: purchase.members.some((x) => x === name),\n          })\n        )\n      );\n\n      if (this.hasRePayedDebts) {\n        this.members.controls.forEach((control) => {\n          control.disable();\n        });\n      }\n    }\n  }\n\n  checkAllMembers(selected: boolean) {\n    this.fillFormArray(\n      this.event.members.map((name) =>\n        this.formBuilder.group({ name, selected })\n      )\n    );\n  }\n\n  fillFormArray(config: any) {\n    this.purchaseForm.setControl(\n      'members',\n      this.formBuilder.array(config || [])\n    );\n  }\n\n  mapPurchase(): Purchase {\n    const { title, payer, sum } = this.purchaseForm.value as Purchase;\n\n    if (this.hasRePayedDebts && this.isEdit) {\n      return {\n        title,\n        date: this.purchase.date,\n        payer: this.purchase.payer,\n        sum: this.purchase.sum,\n        members: this.purchase.members,\n      };\n    }\n\n    return {\n      date: this.isEdit ? this.purchase.date : moment().utc().valueOf(),\n      title,\n      payer,\n      sum,\n      members: this.members?.value\n        .filter((x: PurchaseMember) => x.selected)\n        .map((x: PurchaseMember) => x.name),\n    };\n  }\n\n  async onSubmit() {\n    if (this.purchaseForm.valid) {\n      this.loading$.next(true);\n\n      const purchase = this.mapPurchase();\n\n      if (this.isEdit && this.purchaseId) {\n        await this.dataService.updatePurchase(\n          this.event.id,\n          this.purchaseId,\n          purchase\n        );\n\n        await this.onChange();\n      } else {\n        await this.dataService.addPurchase(this.eventId, purchase);\n\n        const currentUser = this.dataService.getCurrentUser(this.event.id);\n        const action = this.eventActionCreator.addPurchase(\n          currentUser,\n          purchase.title,\n          purchase.sum\n        );\n\n        await this.dataService.addEventAction(this.eventId, action);\n        await this.onChange();\n      }\n    }\n  }\n\n  async onDeletePurchase() {\n    this.dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      disableClose: false,\n    });\n\n    await this.dialogRef.afterClosed().subscribe(async (result) => {\n      if (result) {\n        this.loading$.next(true);\n        await this.dataService.deletePurchase(this.eventId, this.purchaseId);\n\n        const currentUser = this.dataService.getCurrentUser(this.eventId);\n        const action = await this.eventActionCreator.deletePurchase(\n          currentUser,\n          this.purchase.title\n        );\n        await this.dataService.addEventAction(this.eventId, action);\n\n        await this.onChange();\n      }\n\n      this.dialogRef = null as any;\n    });\n  }\n\n  async onChange() {\n    await this.router.navigate(['events', this.eventId]);\n    this.loading$.next(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".delete-purchase-button {\n  margin-top: 1em;\n}\n\n.hasRePayedDebts {\n  margin-bottom: 1em;\n}\n",
                    "styleUrl": "./purchase-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "TitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "members": {
                    "name": "members",
                    "getSignature": {
                        "name": "members",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 88
                    }
                },
                "hasRePayedDebts": {
                    "name": "hasRePayedDebts",
                    "getSignature": {
                        "name": "hasRePayedDebts",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 92
                    }
                }
            },
            "templateData": "<header>\n  <mat-toolbar color=\"primary\">\n    <button\n      class=\"router-button\"\n      mat-icon-button\n      [routerLink]=\"['/events', eventId]\"\n    >\n      <mat-icon>close</mat-icon>\n    </button>\n    <h1>{{ titleService.getTitle() }}</h1>\n    <span class=\"spacer\"></span>\n    <button\n      mat-icon-button\n      form=\"purchaseForm\"\n      [disabled]=\"purchaseForm.invalid\"\n    >\n      <mat-icon>check</mat-icon>\n    </button>\n  </mat-toolbar>\n</header>\n\n<div *ngIf=\"loading$ | async; else form\">\n  <spinner></spinner>\n</div>\n\n<ng-template #form>\n  <main class=\"container\" *ngIf=\"event\">\n    <div *ngIf=\"hasRePayedDebts\" class=\"mat-form-field-invalid hasRePayedDebts\">\n      После начала возвращения долгов можно редактировать только название\n      покупки.\n    </div>\n\n    <form [formGroup]=\"purchaseForm\" (ngSubmit)=\"onSubmit()\" id=\"purchaseForm\">\n      <mat-form-field class=\"full-width\">\n        <mat-label>Название покупки</mat-label>\n        <input matInput formControlName=\"title\" type=\"text\" required />\n      </mat-form-field>\n\n      <mat-form-field class=\"full-width\">\n        <mat-label>Сумма, Р</mat-label>\n        <input matInput formControlName=\"sum\" numbersOnly required />\n      </mat-form-field>\n\n      <div\n        *ngIf=\"purchaseForm.errors?.minimalSum\"\n        class=\"mat-form-field-invalid\"\n      >\n        Минимальная сумма покупки должна быть больше 1 рубля\n      </div>\n\n      <mat-form-field class=\"full-width\">\n        <mat-label>Кто оплачивает</mat-label>\n        <mat-select formControlName=\"payer\" required>\n          <mat-option *ngFor=\"let member of event.members\" [value]=\"member\">\n            {{ member }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <separator position=\"outer\"></separator>\n      <grey-title text=\"Участники покупки\"></grey-title>\n\n      <div formArrayName=\"members\">\n        <div\n          *ngIf=\"purchaseForm.errors?.minimalMembersCount\"\n          class=\"mat-form-field-invalid\"\n        >\n          Нужен хотя бы один участник\n        </div>\n\n        <div\n          *ngFor=\"let member of members.controls; let i = index\"\n          [formGroupName]=\"i\"\n        >\n          <mat-checkbox color=\"primary\" formControlName=\"selected\">\n            <span class=\"label\">{{ member.get(\"name\")?.value }}</span>\n          </mat-checkbox>\n        </div>\n      </div>\n    </form>\n\n    <div *ngIf=\"isEdit && !hasRePayedDebts\">\n      <separator position=\"outer\"></separator>\n      <button\n        class=\"delete-purchase-button\"\n        (click)=\"onDeletePurchase()\"\n        mat-raised-button\n        color=\"basic\"\n      >\n        <mat-icon>close</mat-icon>Удалить покупку\n      </button>\n    </div>\n  </main>\n</ng-template>\n"
        },
        {
            "name": "PurchaseItemComponent",
            "id": "component-PurchaseItemComponent-5917f35195c08180bd7ed5a11446a7c57ca016354d749046520b537a7ec719c894bba73fbdcc70b4e794a0232d94245327e91e644cbfde70209f8e2f9b6d2b31",
            "file": "src/app/event/event-info/purchases-tab/purchase-item/purchase-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "purchase-item",
            "styleUrls": [
                "./purchase-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./purchase-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventDto",
                    "decorators": []
                },
                {
                    "name": "purchase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Purchase",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Purchase, EventDto } from '../../../../../models/Event';\nimport { formatSum } from '../../../../../utils/Formatters';\n\n@Component({\n  selector: 'purchase-item',\n  templateUrl: './purchase-item.component.html',\n  styleUrls: ['./purchase-item.component.scss'],\n})\nexport class PurchaseItemComponent {\n  @Input() event!: EventDto;\n  @Input() purchase!: Purchase;\n\n  get purchaseSum(): string {\n    return formatSum(this.purchase.sum);\n  }\n\n  get purchaseSubtitle(): string {\n    const purchaseMembersCount = this.purchase.members.length;\n    const eventMembersCount = this.event.members.length;\n\n    return purchaseMembersCount === 1\n      ? `1 из ${eventMembersCount} участвует`\n      : `${purchaseMembersCount} из ${eventMembersCount} участвуют`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".purchase-item {\n  display: flex;\n  padding: 16px;\n\n  &__description {\n    flex-grow: 1;\n  }\n\n  &__title {\n    color: var(--dark);\n    font-size: 18px;\n    margin-bottom: 6px;\n    line-height: 1.2;\n  }\n\n  &__payer {\n    height: 16px;\n    color: var(--dark);\n    font-size: 14px;\n    margin-bottom: 2px;\n    line-height: 16px;\n  }\n\n  &__subtitle {\n    height: 16px;\n    color: var(--grey);\n    font-size: 14px;\n    line-height: 16px;\n  }\n\n  &__sum {\n    font-weight: 700;\n    color: var(--dark);\n    text-transform: uppercase;\n  }\n}\n",
                    "styleUrl": "./purchase-item.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "purchaseSum": {
                    "name": "purchaseSum",
                    "getSignature": {
                        "name": "purchaseSum",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                },
                "purchaseSubtitle": {
                    "name": "purchaseSubtitle",
                    "getSignature": {
                        "name": "purchaseSubtitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                }
            },
            "templateData": "<div class=\"purchase-item\" [routerLink]=\"['purchases', purchase.id, 'edit']\">\n  <div class=\"purchase-item__description\">\n    <div class=\"purchase-item__title\">{{ purchase.title }}</div>\n    <div class=\"purchase-item__payer\">{{ purchase.payer }}</div>\n    <div class=\"purchase-item__subtitle\">{{ purchaseSubtitle }}</div>\n  </div>\n  <div class=\"purchase-item__sum\">{{ purchaseSum }} р</div>\n</div>\n\n<mat-divider></mat-divider>\n"
        },
        {
            "name": "PurchasesTabComponent",
            "id": "component-PurchasesTabComponent-a7480fbf55771c234fd2f95379f49af366adb1b774f2429fde5b201b2f3a4bbe0f50c09d944a7bd1b1b204bd66d39d351a7f778620c9f0a6e5aaad4c73e79ec2",
            "file": "src/app/event/event-info/purchases-tab/purchases-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "purchases-tab",
            "styleUrls": [
                "./purchases-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./purchases-tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { EventDto } from '../../../../models/Event';\n\n@Component({\n  selector: 'purchases-tab',\n  templateUrl: './purchases-tab.component.html',\n  styleUrls: ['./purchases-tab.component.scss'],\n})\nexport class PurchasesTabComponent {\n  @Input() event!: EventDto;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./purchases-tab.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"new-event\" *ngIf=\"event.purchases?.length; else noPurchases\">\n  <purchase-item\n    *ngFor=\"let purchase of event.purchases; let i = index\"\n    [purchase]=\"purchase\"\n    [event]=\"event\"\n  ></purchase-item>\n</div>\n\n<fab-button\n  link=\"/events/{{ event.id }}/purchases/new\"\n  icon=\"add_shopping_cart\"\n></fab-button>\n\n<ng-template #noPurchases>\n  <empty-items\n    icon=\"add_shopping_cart\"\n    text=\"У вас пока нет покупок\"\n  ></empty-items>\n</ng-template>\n"
        },
        {
            "name": "PwaInstallComponent",
            "id": "component-PwaInstallComponent-3efc461bbad11ae4abf3428391c4742d4b833c7230ec63bcee8b229dffa5aae57ced2f2871784895abd32644086fd35df8f9fdbac939d29b9024758f02f4f85b",
            "file": "src/app/event/event-info/event-sidenav/pwa-install/pwa-install.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pwa-install",
            "styleUrls": [
                "./pwa-install.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pwa-install.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<PwaInstallComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-pwa-install',\n  templateUrl: './pwa-install.component.html',\n  styleUrls: ['./pwa-install.component.scss'],\n})\nexport class PwaInstallComponent {\n  constructor(public dialogRef: MatDialogRef<PwaInstallComponent>) {}\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pwa__content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 100%;\n\n  .pwa__close {\n    margin-left: auto;\n\n    mat-icon {\n      cursor: pointer;\n    }\n  }\n\n  .pwa__wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .pwa__icon {\n      display: block;\n      margin-bottom: 1em;\n\n      mat-icon {\n        width: auto;\n        height: auto;\n        font-size: 6em;\n        color: var(--medium-grey);\n        padding: 0;\n      }\n    }\n\n    .pwa__text {\n      text-align: center;\n      font-size: 1.2em;\n      line-height: 1.4;\n      font-weight: normal;\n    }\n  }\n\n  .pwa__bottom {\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./pwa-install.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PwaInstallComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PwaInstallComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"pwa__content\">\n  <div class=\"pwa__close\">\n    <mat-icon (click)=\"onClose()\">close</mat-icon>\n  </div>\n  <div class=\"pwa__wrapper\">\n    <div class=\"pwa__icon\">\n      <mat-icon>add_to_home_screen</mat-icon>\n    </div>\n    <div class=\"pwa__text\">\n      Для установки приложения нажмите <br />«Добавить на главный экран»\n      <br />или «На экран домой» <br />в меню браузера\n    </div>\n  </div>\n  <div class=\"pwa__bottom\" (click)=\"onClose()\">Не сейчас</div>\n</div>\n"
        },
        {
            "name": "RepayDebtComponent",
            "id": "component-RepayDebtComponent-cfdabcf90575572b37a498c702ead31c127ba38e87d3d25a117d2a24a6ba6991d6342b1374731a3a0e087d070e4b96953f4fcd6c591f972caeba1d4e980b247d",
            "file": "src/app/event/event-info/debts-tab/repay-debt/repay-debt.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "repay-debt",
            "styleUrls": [
                "./repay-debt.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./repay-debt.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DebtDto",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rePayDebtForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { DebtDto } from '../../../../../models/Event';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  sumGreaterZero,\n  sumLessOrEqualDebt,\n} from '../../../../../utils/FormValidators';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DataService } from '../../../../../shared/data.service';\nimport { EventActionCreator } from '../../../../../shared/event-action-creator';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'repay-debt',\n  templateUrl: './repay-debt.component.html',\n  styleUrls: ['./repay-debt.component.scss'],\n})\nexport class RepayDebtComponent implements OnInit {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  rePayDebtForm!: FormGroup;\n\n  constructor(\n    private dataService: DataService,\n    private eventActionCreator: EventActionCreator,\n    private formBuilder: FormBuilder,\n    private dialogRef: MatDialogRef<RepayDebtComponent>,\n    @Inject(MAT_DIALOG_DATA) public payload: DebtDto\n  ) {}\n\n  ngOnInit(): void {\n    this.rePayDebtForm = this.formBuilder.group(\n      {\n        sum: [\n          this.payload.debt.sum || 0,\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[0-9]*$'),\n          ]),\n        ],\n      },\n      {\n        validators: [\n          sumGreaterZero(),\n          sumLessOrEqualDebt(this.payload.debt.sum),\n        ],\n      }\n    );\n  }\n\n  async onSubmit() {\n    this.loading$.next(true);\n    this.rePayDebtForm.disable();\n\n    const event = this.payload.event;\n    const debt = this.payload.debt;\n    const currentUser = this.payload.currentUser;\n\n    const currentDebtSum = this.rePayDebtForm.value.sum;\n\n    const action =\n      Math.abs(currentDebtSum) === debt.sum\n        ? this.eventActionCreator.giveBack(\n            currentUser,\n            debt.from,\n            currentDebtSum\n          )\n        : this.eventActionCreator.giveBackPartially(\n            currentUser,\n            debt.from,\n            currentDebtSum\n          );\n\n    Promise.all<any, any, any>([\n      this.dataService.addEventAction(event.id, action),\n      this.dataService.updateRePayedDebt(event.id, {\n        sum: Number(currentDebtSum),\n        name: this.getName(debt.from),\n      }),\n      this.dataService.updateRePayedDebt(event.id, {\n        sum: Number(currentDebtSum * -1),\n        name: this.getName(debt.to),\n      }),\n    ]).then((res) => {\n      this.loading$.next(false);\n      this.dialogRef.close();\n      location.reload();\n    });\n  }\n\n  getName(name: string): string {\n    return name.replace(' (Вы)', '');\n  }\n\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".repay-debt__direction {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1em;\n}\n\n.repay-debt__icon {\n  margin: 0 0.5em 0 0.3em;\n\n  mat-icon {\n    font-size: 1.7em;\n    color: var(--grey);\n  }\n}\n\n.bold {\n  font-weight: bold;\n}\n\n.buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n",
                    "styleUrl": "./repay-debt.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RepayDebtComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "payload",
                        "type": "DebtDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventActionCreator",
                        "type": "EventActionCreator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RepayDebtComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "payload",
                        "type": "DebtDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>Отметить долг возвращенным</h2>\n\n<div mat-dialog-content>\n  <div class=\"repay-debt__direction\">\n    {{ payload.debt.from }}\n    <div class=\"repay-debt__icon\">\n      <mat-icon>arrow_forward</mat-icon>\n    </div>\n    {{ payload.debt.to }}\n  </div>\n\n  <form [formGroup]=\"rePayDebtForm\" (ngSubmit)=\"onSubmit()\" id=\"rePayDebtForm\">\n    <mat-form-field class=\"full-width\">\n      <mat-label>Сколько, Р</mat-label>\n      <input matInput formControlName=\"sum\" numbersOnly required />\n    </mat-form-field>\n\n    <div\n      *ngIf=\"rePayDebtForm.errors?.sumLessOrEqualDebt\"\n      class=\"mat-form-field-invalid\"\n    >\n      Число не может превышать сумму долга\n      <span class=\"bold\">{{ this.payload.debt.sum }} Р</span>\n    </div>\n  </form>\n</div>\n\n<div mat-dialog-actions class=\"buttons\">\n  <button\n    color=\"basic\"\n    mat-raised-button\n    (click)=\"onCancel()\"\n    [disabled]=\"loading$ | async\"\n  >\n    Отмена\n  </button>\n  <button\n    color=\"primary\"\n    mat-raised-button\n    form=\"rePayDebtForm\"\n    [disabled]=\"rePayDebtForm.invalid || (loading$ | async)\"\n  >\n    Ок\n  </button>\n</div>\n"
        },
        {
            "name": "SeparatorComponent",
            "id": "component-SeparatorComponent-4d3869a7e3b1ac486b90f665628ad5eebbb69b9d9d8226e0ebc73e9d7aa663e99677871f8d24cf35358a47c0a384fe891a798f11442331537dd69655efb08824",
            "file": "src/app/base-elements/separator/separator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "separator",
            "styleUrls": [
                "./separator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./separator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'separator',\n  templateUrl: './separator.component.html',\n  styleUrls: ['./separator.component.scss'],\n})\nexport class SeparatorComponent {\n  @Input() position: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".separator {\n  width: calc(100% + 1em);\n  margin-left: -1em;\n  height: 8px;\n  overflow: hidden;\n  background: var(--light-grey);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.06);\n  box-shadow: 0 -1px 1px 0 rgb(0 0 0 / 26%);\n\n  &.outer {\n    width: calc(100% + 2em);\n  }\n}\n",
                    "styleUrl": "./separator.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"separator {{ position }}\"></div>\n"
        },
        {
            "name": "ShareEventComponent",
            "id": "component-ShareEventComponent-8b99804f24913f62100694d4a84fade95cae1a03fe7b79ec2ad6c304e2e0597f4e604b2f1d1e982b62dbd4f55aa2b1d32d11cf7cdea83ec2b6470807e97b0cba",
            "file": "src/app/event/event-info/share-event/share-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "share-event",
            "styleUrls": [
                "./share-event.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCopyClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLaterClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { NotificationService } from '../../../../shared/notification.service';\n\n@Component({\n  selector: 'share-event',\n  templateUrl: './share-event.component.html',\n  styleUrls: ['./share-event.component.scss'],\n})\nexport class ShareEventComponent {\n  constructor(\n    private notificationService: NotificationService,\n    private dialogRef: MatDialogRef<ShareEventComponent>,\n    @Inject(MAT_DIALOG_DATA) public id: string\n  ) {}\n\n  get eventLink(): string {\n    return `${window.location.origin}/events/${this.id}/login`;\n  }\n\n  onLaterClick() {\n    this.dialogRef.close();\n  }\n\n  onCopyClick() {\n    this.dialogRef.close();\n    this.notificationService.open('Ссылка скопирована в буфер обмена');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".share-link {\n  padding: 14px 16px;\n  font-family: monospace;\n  line-height: 1.4;\n  background: var(--light-grey);\n  user-select: text;\n  white-space: nowrap;\n  overflow-x: auto;\n}\n\n.buttons {\n  justify-content: flex-end;\n}\n",
                    "styleUrl": "./share-event.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShareEventComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShareEventComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "eventLink": {
                    "name": "eventLink",
                    "getSignature": {
                        "name": "eventLink",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                }
            },
            "templateData": "<h2 mat-dialog-title>Пригласить друзей</h2>\n\n<div mat-dialog-content>\n  <p>\n    Поделитесь ссылкой на мероприятие с друзьями, чтобы они могли вести учёт\n    покупок вместе с вами:\n  </p>\n\n  <div class=\"share-link\">{{ eventLink }}</div>\n</div>\n\n<div mat-dialog-actions class=\"buttons\">\n  <button color=\"basic\" mat-raised-button (click)=\"onLaterClick()\">\n    Позже\n  </button>\n\n  <button\n    color=\"primary\"\n    mat-raised-button\n    [cdkCopyToClipboard]=\"eventLink\"\n    (click)=\"onCopyClick()\"\n  >\n    Скопировать\n  </button>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-8595ece9e90525b0e57fd773ffd8bac652b46d041d4747ed223196fb9704f90d741ce1f8b9ef473607a00891b87d2c595c4ecf3c28351fe0196b88b4ed6aa339",
            "file": "src/app/base-elements/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss'],\n})\nexport class SpinnerComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spinner {\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 320px;\n  height: 90vh;\n}\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"spinner\">\n  <mat-spinner></mat-spinner>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-f6c2eb8a6317fe7874be07a50a522349679a83b055321ef80e1f9f29a49883365b5732bd3741e9c15bfce8ac437373fff400091ee92952213522447c0a30c96e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { environment } from '../environments/environment';\nimport { provideFirebaseApp, initializeApp } from '@angular/fire/app';\nimport { getFirestore, provideFirestore } from '@angular/fire/firestore';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSnackBarModule,\n    provideFirebaseApp(() => initializeApp(environment.firebase)),\n    provideFirestore(() => getFirestore()),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  exports: [],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "provideFirebaseApp(() => initializeApp(environment"
                        },
                        {
                            "name": "provideFirestore(() => getFirestore())"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e6ba481e2853ef359b707bacb0943f5fa62c2134ec5d26e73379740ea207bcfd2260605165d9be03a774235cb61f6ad96b59a2d830ed37c6ad9d0ce253c7bed2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () =>\n      \"import('./events/events-list.module').then((m) => m.EventsListModule)\",\n  },\n  {\n    path: 'events',\n    loadChildren: () =>\n      \"import('./event/event-page.module').then((m) => m.EventPageModule)\",\n  },\n  {\n    path: 'events/:id/purchases',\n    loadChildren: () =>\n      \"import('./purchase/purchase.module').then((m) => m.PurchaseModule)\",\n  },\n  {\n    path: 'feedback',\n    loadChildren: () =>\n      \"import('./feedback/feedback.module').then((m) => m.FeedbackModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BaseElementsModule",
            "id": "module-BaseElementsModule-7cfa14249c1eb49b0399dd3fedfd548a8725a9bb8388993d14bdf03a774b9bb00253cfc8e4792ba320aba0870927e5cb3c1aee3cba4f1a8e10ad6b2ddc78afc6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/base-elements/base-elements.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmptyItemsComponent } from './empty-items/empty-items.component';\nimport { GreyTitleComponent } from './grey-title/grey-title.component';\nimport { SeparatorComponent } from './separator/separator.component';\nimport { SpinnerComponent } from './spinner/spinner.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FabButtonComponent } from './fab-button/fab-button.component';\nimport { RouterModule } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { NumericDirective } from '../../shared/numeric.directive';\nimport { ConfirmDialogComponent } from './confirm-dialog/confirm-dialog.component';\n\n@NgModule({\n  declarations: [\n    EmptyItemsComponent,\n    GreyTitleComponent,\n    SeparatorComponent,\n    SpinnerComponent,\n    FabButtonComponent,\n    NumericDirective,\n    ConfirmDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatButtonModule,\n    RouterModule,\n  ],\n  exports: [\n    EmptyItemsComponent,\n    GreyTitleComponent,\n    SeparatorComponent,\n    SpinnerComponent,\n    FabButtonComponent,\n    NumericDirective,\n    ConfirmDialogComponent,\n  ],\n})\nexport class BaseElementsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmDialogComponent"
                        },
                        {
                            "name": "EmptyItemsComponent"
                        },
                        {
                            "name": "FabButtonComponent"
                        },
                        {
                            "name": "GreyTitleComponent"
                        },
                        {
                            "name": "NumericDirective"
                        },
                        {
                            "name": "SeparatorComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfirmDialogComponent"
                        },
                        {
                            "name": "EmptyItemsComponent"
                        },
                        {
                            "name": "FabButtonComponent"
                        },
                        {
                            "name": "GreyTitleComponent"
                        },
                        {
                            "name": "NumericDirective"
                        },
                        {
                            "name": "SeparatorComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventPageModule",
            "id": "module-EventPageModule-6a6e1f5d6e8b47f6ba820184fec0e451c0ff765afa6257f0a9b90cd1074024f4f58a16d44e99ecf0bfb8325e3bc6365628518409caf3c02b38eb6526c8f5c0e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/event/event-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EventPageRoutingModule } from './event-page-routing.module';\nimport { EventFormComponent } from './event-form/event-form.component';\nimport { EventInfoComponent } from './event-info/event-info.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { DebtItemComponent } from './event-info/debts-tab/debt-item/debt-item.component';\nimport { DebtsTabComponent } from './event-info/debts-tab/debts-tab.component';\nimport { EventCheckComponent } from './event-info/debts-tab/event-check/event-check.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ShareEventComponent } from './event-info/share-event/share-event.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ActionsTabComponent } from './event-info/actions-tab/actions-tab.component';\nimport { ActionItemComponent } from './event-info/actions-tab/action-item/action-item.component';\nimport { ActionTypeComponent } from './event-info/actions-tab/action-type/action-type.component';\nimport { PurchasesTabComponent } from './event-info/purchases-tab/purchases-tab.component';\nimport { PurchaseItemComponent } from './event-info/purchases-tab/purchase-item/purchase-item.component';\nimport { EventSidenavComponent } from './event-info/event-sidenav/event-sidenav.component';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { BaseElementsModule } from '../base-elements/base-elements.module';\nimport { RepayDebtComponent } from './event-info/debts-tab/repay-debt/repay-debt.component';\nimport { EventLoginComponent } from './event-login/event-login.component';\nimport { EventHeaderComponent } from './event-info/event-sidenav/event-header/event-header.component';\nimport { AddMemberComponent } from './event-login/add-member/add-member.component';\nimport { PwaInstallComponent } from './event-info/event-sidenav/pwa-install/pwa-install.component';\n\n@NgModule({\n  declarations: [\n    EventFormComponent,\n    EventInfoComponent,\n    DebtItemComponent,\n    DebtsTabComponent,\n    EventCheckComponent,\n    ShareEventComponent,\n    ActionsTabComponent,\n    ActionItemComponent,\n    ActionTypeComponent,\n    PurchasesTabComponent,\n    PurchaseItemComponent,\n    EventSidenavComponent,\n    RepayDebtComponent,\n    EventLoginComponent,\n    EventHeaderComponent,\n    AddMemberComponent,\n    PwaInstallComponent,\n  ],\n  imports: [\n    CommonModule,\n    EventPageRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatDialogModule,\n    ClipboardModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatDividerModule,\n    BaseElementsModule,\n  ],\n})\nexport class EventPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionItemComponent"
                        },
                        {
                            "name": "ActionTypeComponent"
                        },
                        {
                            "name": "ActionsTabComponent"
                        },
                        {
                            "name": "AddMemberComponent"
                        },
                        {
                            "name": "DebtItemComponent"
                        },
                        {
                            "name": "DebtsTabComponent"
                        },
                        {
                            "name": "EventCheckComponent"
                        },
                        {
                            "name": "EventFormComponent"
                        },
                        {
                            "name": "EventHeaderComponent"
                        },
                        {
                            "name": "EventInfoComponent"
                        },
                        {
                            "name": "EventLoginComponent"
                        },
                        {
                            "name": "EventSidenavComponent"
                        },
                        {
                            "name": "PurchaseItemComponent"
                        },
                        {
                            "name": "PurchasesTabComponent"
                        },
                        {
                            "name": "PwaInstallComponent"
                        },
                        {
                            "name": "RepayDebtComponent"
                        },
                        {
                            "name": "ShareEventComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseElementsModule"
                        },
                        {
                            "name": "EventPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventPageRoutingModule",
            "id": "module-EventPageRoutingModule-8f972ec04bc8c6e24e82f74a32a8eae445ca95124e6410824aa2d10f379c7aa728e42acf9e3071c46045de17d311f497b4ec2199afab790a2ade5c5b19214212",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/event/event-page-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EventFormComponent } from './event-form/event-form.component';\nimport { EventInfoComponent } from './event-info/event-info.component';\nimport { EventLoginComponent } from './event-login/event-login.component';\n\nconst routes: Routes = [\n  {\n    path: 'new',\n    component: EventFormComponent,\n    data: {\n      title: 'Новое событие',\n    },\n  },\n  {\n    path: ':id/edit',\n    component: EventFormComponent,\n    data: {\n      isEdit: true,\n      title: 'Редактирование события',\n    },\n  },\n  {\n    path: ':id',\n    component: EventInfoComponent,\n  },\n  {\n    path: ':id/login',\n    component: EventLoginComponent,\n    data: {\n      title: 'Приглашение',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EventPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventsListModule",
            "id": "module-EventsListModule-b33866f4ea4e833671e17f46ac4cec19f39ff997a3de979005cccf5fba907751ccc7bc2dbdafc578c6194964089bd55a0ba49ab3166d25152cb4d9cfb5eb7460",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/events/events-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EventsListRoutingModule } from './events-list-routing.module';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { EventsListComponent } from './events-list.component';\nimport { EventItemComponent } from './event-item/event-item.component';\nimport { MatListModule } from '@angular/material/list';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { BaseElementsModule } from '../base-elements/base-elements.module';\n\n@NgModule({\n  declarations: [EventsListComponent, EventItemComponent],\n  imports: [\n    CommonModule,\n    EventsListRoutingModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatInputModule,\n    MatButtonModule,\n    MatListModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule,\n    BaseElementsModule,\n  ],\n})\nexport class EventsListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EventItemComponent"
                        },
                        {
                            "name": "EventsListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseElementsModule"
                        },
                        {
                            "name": "EventsListRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventsListRoutingModule",
            "id": "module-EventsListRoutingModule-14138ed45be849c73665a81bdebebb58ddd230c09482f4899e5820b7b8abf7073b1b76fb2a0bdb9f15301a43e0f6443e9f3ea428a25429b4010feba1c7f4480e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/events/events-list-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EventsListComponent } from './events-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EventsListComponent,\n    data: {\n      title: 'События',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EventsListRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeedbackModule",
            "id": "module-FeedbackModule-e02ec5094bbb59c9f1d2e3fdc7badc8f92e8655c7551d05a95a19b36524d8edefa6a3a328d7f7f8e9a8c15270d9c3a4020ce5b634dfd70d60940e81ee7c24e03",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/feedback/feedback.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FeedbackRoutingModule } from './feedback-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FeedbackFormComponent } from './feedback-form/feedback-form.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BaseElementsModule } from '../base-elements/base-elements.module';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  declarations: [FeedbackFormComponent],\n  imports: [\n    CommonModule,\n    FeedbackRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BaseElementsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatInputModule,\n    MatButtonModule,\n  ],\n})\nexport class FeedbackModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FeedbackFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseElementsModule"
                        },
                        {
                            "name": "FeedbackRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeedbackRoutingModule",
            "id": "module-FeedbackRoutingModule-2aff3f0089ae3b1109dcedcc6ea5d8d24f42cd9918fccb4c07da5f3bc20e0f14eb81228e4866b85406cf0a067f35684515b9566b01271fb8bbc4ea9ce57a737e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/feedback/feedback-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FeedbackFormComponent } from './feedback-form/feedback-form.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FeedbackFormComponent,\n    data: {\n      title: 'Обратная связь',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FeedbackRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PurchaseModule",
            "id": "module-PurchaseModule-7c0aae92f8cf0e280d9a82a807d28d68a82991be4eb995b0f254ce1de4c35593982fc257f02c2351819ea5002260cc99a728c8689a4dc18a378e2982a8b59bda",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/purchase/purchase.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PurchaseRoutingModule } from './purchase-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BaseElementsModule } from '../base-elements/base-elements.module';\nimport { PurchaseFormComponent } from './purchase-form/purchase-form.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [PurchaseFormComponent],\n  imports: [\n    CommonModule,\n    PurchaseRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BaseElementsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatCheckboxModule,\n    MatDialogModule,\n  ],\n})\nexport class PurchaseModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PurchaseFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseElementsModule"
                        },
                        {
                            "name": "PurchaseRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PurchaseRoutingModule",
            "id": "module-PurchaseRoutingModule-ba46a2c2736844c6c17d003be343fdcac59162e909b5078808f1e6b201201f6d403ba3e959a8466644dcb3c04e49b9179c022c7cc8ff7b35111f621a98bc40f8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/purchase/purchase-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PurchaseFormComponent } from './purchase-form/purchase-form.component';\n\nconst routes: Routes = [\n  {\n    path: 'new',\n    component: PurchaseFormComponent,\n    data: {\n      title: 'Новая покупка',\n    },\n  },\n  {\n    path: ':purchaseId/edit',\n    component: PurchaseFormComponent,\n    data: {\n      isEdit: true,\n      title: 'Редактирование покупки',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PurchaseRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/event/event-info/actions-tab/action-item/action-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\n  [ActionTypes.CreateEvent]: 'calendar_today',\n  [ActionTypes.ChangeEventName]: 'create',\n  [ActionTypes.ChangeEventDate]: 'create',\n  [ActionTypes.AddMemberToEvent]: 'person',\n  [ActionTypes.AddMembersToEvent]: 'person',\n  [ActionTypes.RemoveMemberFromEvent]: 'delete_sweep',\n  [ActionTypes.AddPurchase]: 'add_shopping_cart',\n  [ActionTypes.DeletePurchase]: 'create',\n  [ActionTypes.AddMemberToPurchase]: 'create',\n  [ActionTypes.AddMembersToPurchase]: 'create',\n  [ActionTypes.RemoveMemberFromPurchase]: 'create',\n  [ActionTypes.GiveBackPartially]: 'check_circle',\n  [ActionTypes.GiveBack]: 'check',\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/empty-items/empty-items.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/fab-button/fab-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/grey-title/grey-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/separator/separator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  name: 'WeSplit',\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyB0bNmQ3UAfLjXvpwGrJFssjlf74xZqSB4',\n    authDomain: 'wesplit-840b9.firebaseapp.com',\n    projectId: 'wesplit-840b9',\n    storageBucket: 'wesplit-840b9.appspot.com',\n    messagingSenderId: '190723137399',\n    appId: '1:190723137399:web:7b98bfe021caaec1054b72',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  name: 'WeSplit',\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyB0bNmQ3UAfLjXvpwGrJFssjlf74xZqSB4',\n    authDomain: 'wesplit-840b9.firebaseapp.com',\n    projectId: 'wesplit-840b9',\n    storageBucket: 'wesplit-840b9.appspot.com',\n    messagingSenderId: '190723137399',\n    appId: '1:190723137399:web:7b98bfe021caaec1054b72',\n  },\n}"
            },
            {
                "name": "Full",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/separator/separator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/empty-items/empty-items.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<EmptyItemsComponent>",
                "defaultValue": "(args: EmptyItemsComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/fab-button/fab-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FabButtonComponent>",
                "defaultValue": "(args: FabButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/grey-title/grey-title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GreyTitleComponent>",
                "defaultValue": "(args: GreyTitleComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpinnerComponent>",
                "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/separator/separator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeparatorComponent>",
                "defaultValue": "(args: SeparatorComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ConfirmDialogComponent>",
                "defaultValue": "(\n  args: ConfirmDialogComponent\n) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "duplicateMembersValidator",
                "file": "src/utils/FormValidators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "formatDebtType",
                "file": "src/utils/Formatters.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DebtTypes",
                "jsdoctags": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatStatus",
                "file": "src/utils/Formatters.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatSum",
                "file": "src/utils/Formatters.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "sum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEventBalance",
                "file": "src/utils/BalanceCalculator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "currentEvent",
                        "type": "EventDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MemberBalance[]",
                "jsdoctags": [
                    {
                        "name": "currentEvent",
                        "type": "EventDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEventsMembersDebts",
                "file": "src/utils/BalanceCalculator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "membersBalance",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "type": "EventDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MemberDebt[]",
                "jsdoctags": [
                    {
                        "name": "membersBalance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "EventDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getIndex",
                "file": "src/utils/BalanceCalculator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "acc",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "acc",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLocalEvents",
                "file": "src/shared/local-storage.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "LocalEvent[]"
            },
            {
                "name": "minMembersCountInPurchase",
                "file": "src/utils/FormValidators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "organizerInMembersValidation",
                "file": "src/utils/FormValidators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "setLocalEvents",
                "file": "src/shared/local-storage.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "organizer",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "organizer",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sumGreaterZero",
                "file": "src/utils/FormValidators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "sumLessOrEqualDebt",
                "file": "src/utils/FormValidators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "debtSum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "debtSum",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "CreateEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ChangeEventName",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ChangeEventDate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AddMemberToEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AddMembersToEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RemoveMemberFromEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AddPurchase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DeletePurchase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AddMembersToPurchase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AddMemberToPurchase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RemoveMemberFromPurchase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "GiveBackPartially",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "GiveBack",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/Event.ts"
            },
            {
                "name": "DebtTypes",
                "childs": [
                    {
                        "name": "Positive",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Negative",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Neutral",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Other",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/Event.ts"
            }
        ],
        "groupedVariables": {
            "src/app/event/event-info/actions-tab/action-item/action-item.component.ts": [
                {
                    "name": "actionIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/event/event-info/actions-tab/action-item/action-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\n  [ActionTypes.CreateEvent]: 'calendar_today',\n  [ActionTypes.ChangeEventName]: 'create',\n  [ActionTypes.ChangeEventDate]: 'create',\n  [ActionTypes.AddMemberToEvent]: 'person',\n  [ActionTypes.AddMembersToEvent]: 'person',\n  [ActionTypes.RemoveMemberFromEvent]: 'delete_sweep',\n  [ActionTypes.AddPurchase]: 'add_shopping_cart',\n  [ActionTypes.DeletePurchase]: 'create',\n  [ActionTypes.AddMemberToPurchase]: 'create',\n  [ActionTypes.AddMembersToPurchase]: 'create',\n  [ActionTypes.RemoveMemberFromPurchase]: 'create',\n  [ActionTypes.GiveBackPartially]: 'check_circle',\n  [ActionTypes.GiveBack]: 'check',\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/base-elements/empty-items/empty-items.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/empty-items/empty-items.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/empty-items/empty-items.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<EmptyItemsComponent>",
                    "defaultValue": "(args: EmptyItemsComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/base-elements/fab-button/fab-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/fab-button/fab-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/fab-button/fab-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FabButtonComponent>",
                    "defaultValue": "(args: FabButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/base-elements/grey-title/grey-title.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/grey-title/grey-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/grey-title/grey-title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GreyTitleComponent>",
                    "defaultValue": "(args: GreyTitleComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/base-elements/spinner/spinner.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpinnerComponent>",
                    "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/base-elements/separator/separator.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/separator/separator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Full",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/separator/separator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/separator/separator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeparatorComponent>",
                    "defaultValue": "(args: SeparatorComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ConfirmDialogComponent>",
                    "defaultValue": "(\n  args: ConfirmDialogComponent\n) => ({\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  name: 'WeSplit',\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyB0bNmQ3UAfLjXvpwGrJFssjlf74xZqSB4',\n    authDomain: 'wesplit-840b9.firebaseapp.com',\n    projectId: 'wesplit-840b9',\n    storageBucket: 'wesplit-840b9.appspot.com',\n    messagingSenderId: '190723137399',\n    appId: '1:190723137399:web:7b98bfe021caaec1054b72',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  name: 'WeSplit',\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyB0bNmQ3UAfLjXvpwGrJFssjlf74xZqSB4',\n    authDomain: 'wesplit-840b9.firebaseapp.com',\n    projectId: 'wesplit-840b9',\n    storageBucket: 'wesplit-840b9.appspot.com',\n    messagingSenderId: '190723137399',\n    appId: '1:190723137399:web:7b98bfe021caaec1054b72',\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/utils/FormValidators.ts": [
                {
                    "name": "duplicateMembersValidator",
                    "file": "src/utils/FormValidators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "minMembersCountInPurchase",
                    "file": "src/utils/FormValidators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "organizerInMembersValidation",
                    "file": "src/utils/FormValidators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "sumGreaterZero",
                    "file": "src/utils/FormValidators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "sumLessOrEqualDebt",
                    "file": "src/utils/FormValidators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "debtSum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/utils/Formatters.ts": [
                {
                    "name": "formatDebtType",
                    "file": "src/utils/Formatters.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DebtTypes",
                    "jsdoctags": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatStatus",
                    "file": "src/utils/Formatters.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatSum",
                    "file": "src/utils/Formatters.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "sum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/utils/BalanceCalculator.ts": [
                {
                    "name": "getEventBalance",
                    "file": "src/utils/BalanceCalculator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "currentEvent",
                            "type": "EventDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MemberBalance[]",
                    "jsdoctags": [
                        {
                            "name": "currentEvent",
                            "type": "EventDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEventsMembersDebts",
                    "file": "src/utils/BalanceCalculator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "membersBalance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "EventDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MemberDebt[]",
                    "jsdoctags": [
                        {
                            "name": "membersBalance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "EventDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIndex",
                    "file": "src/utils/BalanceCalculator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "acc",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "acc",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/shared/local-storage.service.ts": [
                {
                    "name": "getLocalEvents",
                    "file": "src/shared/local-storage.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "LocalEvent[]"
                },
                {
                    "name": "setLocalEvents",
                    "file": "src/shared/local-storage.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "organizer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "organizer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/models/Event.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "CreateEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ChangeEventName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ChangeEventDate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AddMemberToEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AddMembersToEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RemoveMemberFromEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AddPurchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DeletePurchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AddMembersToPurchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AddMemberToPurchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RemoveMemberFromPurchase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "GiveBackPartially",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "GiveBack",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/Event.ts"
                },
                {
                    "name": "DebtTypes",
                    "childs": [
                        {
                            "name": "Positive",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Negative",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Neutral",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Other",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/Event.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./events/events-list.module#EventsListModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/events/events-list-routing.module.ts",
                                        "module": "EventsListRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "EventsListComponent",
                                                "data": {
                                                    "title": "События"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "EventsListModule"
                            }
                        ]
                    },
                    {
                        "path": "events",
                        "loadChildren": "./event/event-page.module#EventPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/event/event-page-routing.module.ts",
                                        "module": "EventPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "new",
                                                "component": "EventFormComponent",
                                                "data": {
                                                    "title": "Новоесобытие"
                                                }
                                            },
                                            {
                                                "path": ":id/edit",
                                                "component": "EventFormComponent",
                                                "data": {
                                                    "isEdit": true,
                                                    "title": "Редактированиесобытия"
                                                }
                                            },
                                            {
                                                "path": ":id",
                                                "component": "EventInfoComponent"
                                            },
                                            {
                                                "path": ":id/login",
                                                "component": "EventLoginComponent",
                                                "data": {
                                                    "title": "Приглашение"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "EventPageModule"
                            }
                        ]
                    },
                    {
                        "path": "events/:id/purchases",
                        "loadChildren": "./purchase/purchase.module#PurchaseModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/purchase/purchase-routing.module.ts",
                                        "module": "PurchaseRoutingModule",
                                        "children": [
                                            {
                                                "path": "new",
                                                "component": "PurchaseFormComponent",
                                                "data": {
                                                    "title": "Новаяпокупка"
                                                }
                                            },
                                            {
                                                "path": ":purchaseId/edit",
                                                "component": "PurchaseFormComponent",
                                                "data": {
                                                    "isEdit": true,
                                                    "title": "Редактированиепокупки"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PurchaseModule"
                            }
                        ]
                    },
                    {
                        "path": "feedback",
                        "loadChildren": "./feedback/feedback.module#FeedbackModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/feedback/feedback-routing.module.ts",
                                        "module": "FeedbackRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "FeedbackFormComponent",
                                                "data": {
                                                    "title": "Обратнаясвязь"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "FeedbackModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/confirm-dialog/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/empty-items/empty-items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/empty-items/empty-items.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/empty-items/empty-items.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/fab-button/fab-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FabButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/fab-button/fab-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/fab-button/fab-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/grey-title/grey-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GreyTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/grey-title/grey-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/grey-title/grey-title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/separator/separator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeparatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/separator/separator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/separator/separator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Full",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/separator/separator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/base-elements/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-form/event-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/actions-tab/action-item/action-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/actions-tab/action-item/action-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/actions-tab/action-type/action-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/actions-tab/actions-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/debts-tab/debt-item/debt-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DebtItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/debts-tab/debts-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DebtsTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/debts-tab/event-check/event-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/debts-tab/repay-debt/repay-debt.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RepayDebtComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/event-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/event-sidenav/event-header/event-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/event-sidenav/event-sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventSidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/event-sidenav/pwa-install/pwa-install.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PwaInstallComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/purchases-tab/purchase-item/purchase-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PurchaseItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/purchases-tab/purchases-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PurchasesTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-info/share-event/share-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShareEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-login/add-member/add-member.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMemberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-login/add-member/add-member.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/event/event-login/event-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/events/event-item/event-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/events/events-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/feedback/feedback-form/feedback-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedbackFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/purchase/purchase-form/purchase-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PurchaseFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DebtDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Event",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventAction",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventDto",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventMember",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LocalEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberBalance",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberDebt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Purchase",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PurchaseMember",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RePayedDebt",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/Feedback.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/shared/event-action-creator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventActionCreator",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/shared/local-storage.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLocalEvents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/local-storage.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setLocalEvents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/numeric.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NumericDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/title.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TitleService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/BalanceCalculator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEventBalance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/BalanceCalculator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEventsMembersDebts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/BalanceCalculator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getIndex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/FormValidators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "duplicateMembersValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/FormValidators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "minMembersCountInPurchase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/FormValidators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "organizerInMembersValidation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/FormValidators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sumGreaterZero",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/FormValidators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sumLessOrEqualDebt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/Formatters.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatDebtType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/Formatters.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/Formatters.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatSum",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}